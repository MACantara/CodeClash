{
  "problem_number": 40,
  "problem_name": "FizzBuzz",
  "difficulty": "average",
  "programming_language": "java",
  "description": "Write a method called `fizzbuzz(n)` that returns a list of strings from 1 to n. For multiples of 3, use 'Fizz'. For multiples of 5, use 'Buzz'. For multiples of both, use 'FizzBuzz'.",
  "input_specification": "Input format will be provided.",
  "output_specification": "Expected output format will be shown.",
  "sample_inputs": [
    "[15]",
    "[5]",
    "[3]",
    "[1]"
  ],
  "sample_outputs": [
    "['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']",
    "['1', '2', 'Fizz', '4', 'Buzz']",
    "['1', '2', 'Fizz']",
    "['1']"
  ],
  "explanations": [
    "For input [15], output is ['1', '2', 'Fizz', '4', 'Buzz', 'Fizz', '7', '8', 'Fizz', 'Buzz', '11', 'Fizz', '13', '14', 'FizzBuzz']",
    "For input [5], output is ['1', '2', 'Fizz', '4', 'Buzz']",
    "For input [3], output is ['1', '2', 'Fizz']",
    "For input [1], output is ['1']"
  ],
  "notes": [
    "Implement the FizzBuzz problem correctly",
    "Consider edge cases and boundary conditions",
    "Test your solution with various inputs"
  ],
  "hints": [
    "Read the problem description carefully",
    "Start with the base case or simple scenario",
    "Build up to the complete solution step by step"
  ],
  "starter_code": "public class Solution {\n    public static void fizzbuzz() {\n        // Write your code here\n    }\n}",
  "test_cases": [
    {
      "input": [
        15
      ],
      "expected": [
        "1",
        "2",
        "Fizz",
        "4",
        "Buzz",
        "Fizz",
        "7",
        "8",
        "Fizz",
        "Buzz",
        "11",
        "Fizz",
        "13",
        "14",
        "FizzBuzz"
      ]
    },
    {
      "input": [
        5
      ],
      "expected": [
        "1",
        "2",
        "Fizz",
        "4",
        "Buzz"
      ]
    },
    {
      "input": [
        3
      ],
      "expected": [
        "1",
        "2",
        "Fizz"
      ]
    },
    {
      "input": [
        1
      ],
      "expected": [
        "1"
      ]
    }
  ]
}