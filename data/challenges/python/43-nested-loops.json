{
  "problem_number": 43,
  "problem_name": "Nested Loop Pattern",
  "difficulty": "average",
  "programming_language": "python",
  "description": "Write a function called `multiplication_table(n)` that returns a 2D list (nested list) representing an n√ón multiplication table.",
  "input_specification": "Input format will be provided.",
  "output_specification": "Expected output format will be shown.",
  "sample_inputs": [
    "[2]",
    "[3]",
    "[1]",
    "[4]"
  ],
  "sample_outputs": [
    "[[1, 2], [2, 4]]",
    "[[1, 2, 3], [2, 4, 6], [3, 6, 9]]",
    "[[1]]",
    "[[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]]"
  ],
  "explanations": [
    "For input [2], output is [[1, 2], [2, 4]]",
    "For input [3], output is [[1, 2, 3], [2, 4, 6], [3, 6, 9]]",
    "For input [1], output is [[1]]",
    "For input [4], output is [[1, 2, 3, 4], [2, 4, 6, 8], [3, 6, 9, 12], [4, 8, 12, 16]]"
  ],
  "notes": [
    "Implement the Nested Loop Pattern problem correctly",
    "Consider edge cases and boundary conditions",
    "Test your solution with various inputs"
  ],
  "hints": [
    "Read the problem description carefully",
    "Start with the base case or simple scenario",
    "Build up to the complete solution step by step"
  ],
  "starter_code": "def multiplication_table(n):\n    # Write your code here\n    pass",
  "test_cases": [
    {
      "input": [
        2
      ],
      "expected": [
        [
          1,
          2
        ],
        [
          2,
          4
        ]
      ]
    },
    {
      "input": [
        3
      ],
      "expected": [
        [
          1,
          2,
          3
        ],
        [
          2,
          4,
          6
        ],
        [
          3,
          6,
          9
        ]
      ]
    },
    {
      "input": [
        1
      ],
      "expected": [
        [
          1
        ]
      ]
    },
    {
      "input": [
        4
      ],
      "expected": [
        [
          1,
          2,
          3,
          4
        ],
        [
          2,
          4,
          6,
          8
        ],
        [
          3,
          6,
          9,
          12
        ],
        [
          4,
          8,
          12,
          16
        ]
      ]
    }
  ]
}