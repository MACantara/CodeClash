{
  "problem_number": 46,
  "problem_name": "Lambda Filter",
  "difficulty": "easy",
  "programming_language": "python",
  "description": "Write a function called `filter_strings(strings, min_length)` that uses a lambda function to filter strings with length >= min_length.",
  "input_specification": "Input format will be provided.",
  "output_specification": "Expected output format will be shown.",
  "sample_inputs": [
    "[['apple', 'pie', 'banana'], 5]",
    "[['a', 'ab', 'abc', 'abcd'], 3]",
    "[['hello', 'hi', 'hey'], 4]",
    "[['one', 'two', 'three'], 4]"
  ],
  "sample_outputs": [
    "['apple', 'banana']",
    "['abc', 'abcd']",
    "['hello']",
    "['three']"
  ],
  "explanations": [
    "For input [['apple', 'pie', 'banana'], 5], output is ['apple', 'banana']",
    "For input [['a', 'ab', 'abc', 'abcd'], 3], output is ['abc', 'abcd']",
    "For input [['hello', 'hi', 'hey'], 4], output is ['hello']",
    "For input [['one', 'two', 'three'], 4], output is ['three']"
  ],
  "notes": [
    "Implement the Lambda Filter problem correctly",
    "Consider edge cases and boundary conditions",
    "Test your solution with various inputs"
  ],
  "hints": [
    "Read the problem description carefully",
    "Start with the base case or simple scenario",
    "Build up to the complete solution step by step"
  ],
  "starter_code": "def filter_strings(strings, min_length):\n    # Write your code here\n    pass",
  "test_cases": [
    {
      "input": [
        [
          "apple",
          "pie",
          "banana"
        ],
        5
      ],
      "expected": [
        "apple",
        "banana"
      ]
    },
    {
      "input": [
        [
          "a",
          "ab",
          "abc",
          "abcd"
        ],
        3
      ],
      "expected": [
        "abc",
        "abcd"
      ]
    },
    {
      "input": [
        [
          "hello",
          "hi",
          "hey"
        ],
        4
      ],
      "expected": [
        "hello"
      ]
    },
    {
      "input": [
        [
          "one",
          "two",
          "three"
        ],
        4
      ],
      "expected": [
        "three"
      ]
    }
  ]
}