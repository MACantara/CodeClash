{
  "module_id": 4,
  "title": "Docstrings & Documentation",
  "order": 6,
  "reading_content": "\n<h3>Documenting Functions</h3>\n<p>Docstrings are string literals that document functions, classes, and modules. They appear right after the definition.</p>\n\n<h4>Basic Docstring:</h4>\n<pre><code># Simple one-line docstring\ndef greet(name):\n    \"\"\"Greet a person by name.\"\"\"\n    return f\"Hello, {name}!\"\n\n# Access docstring\nprint(greet.__doc__)  # Greet a person by name.\n\n# Help function shows docstring\nhelp(greet)\n# Output:\n# Help on function greet:\n# greet(name)\n#     Greet a person by name.\n</code></pre>\n\n<h4>Multi-line Docstrings:</h4>\n<pre><code>def calculate_area(radius):\n    \"\"\"\n    Calculate the area of a circle.\n    \n    Parameters:\n    radius (float): The radius of the circle\n    \n    Returns:\n    float: The area of the circle\n    \"\"\"\n    return 3.14159 * radius ** 2\n\nprint(calculate_area.__doc__)\n# Displays full documentation\n</code></pre>\n\n<h4>Google Style Docstrings:</h4>\n<pre><code>def divide(a, b):\n    \"\"\"\n    Divide two numbers.\n    \n    Args:\n        a (float): The dividend\n        b (float): The divisor\n    \n    Returns:\n        float: The quotient of a divided by b\n    \n    Raises:\n        ValueError: If b is zero\n    \n    Example:\n        >>> divide(10, 2)\n        5.0\n        >>> divide(10, 0)\n        ValueError: Cannot divide by zero\n    \"\"\"\n    if b == 0:\n        raise ValueError(\"Cannot divide by zero\")\n    return a / b\n</code></pre>\n\n<h4>NumPy/SciPy Style Docstrings:</h4>\n<pre><code>def calculate_statistics(numbers):\n    \"\"\"\n    Calculate basic statistics for a list of numbers.\n    \n    Parameters\n    ----------\n    numbers : list of float\n        The list of numbers to analyze\n    \n    Returns\n    -------\n    dict\n        A dictionary containing:\n        - 'mean': The average value\n        - 'min': The minimum value\n        - 'max': The maximum value\n    \n    Examples\n    --------\n    >>> calculate_statistics([1, 2, 3, 4, 5])\n    {'mean': 3.0, 'min': 1, 'max': 5}\n    \n    Notes\n    -----\n    This function requires at least one number in the list.\n    \"\"\"\n    return {\n        'mean': sum(numbers) / len(numbers),\n        'min': min(numbers),\n        'max': max(numbers)\n    }\n</code></pre>\n\n<h4>Docstring Best Practices:</h4>\n<pre><code># ✓ Good: Clear, concise summary\ndef add(a, b):\n    \"\"\"Return the sum of two numbers.\"\"\"\n    return a + b\n\n# ✓ Good: Describe parameters and return value\ndef create_user(name, age, email):\n    \"\"\"\n    Create a new user account.\n    \n    Args:\n        name (str): The user's full name\n        age (int): The user's age (must be 18+)\n        email (str): The user's email address\n    \n    Returns:\n        dict: A dictionary with user information\n    \n    Raises:\n        ValueError: If age is less than 18\n    \"\"\"\n    if age < 18:\n        raise ValueError(\"User must be 18 or older\")\n    return {'name': name, 'age': age, 'email': email}\n\n# ✗ Avoid: Obvious or redundant docstrings\ndef get_name():\n    \"\"\"Get the name.\"\"\"  # Too vague\n    return self.name\n\n# ✓ Better:\ndef get_name():\n    \"\"\"Return the user's full name as stored in the database.\"\"\"\n    return self.name\n</code></pre>\n\n<h4>Type Hints (Python 3.5+):</h4>\n<pre><code># Type hints make code more clear\ndef greet(name: str) -> str:\n    \"\"\"\n    Greet a person by name.\n    \n    Args:\n        name: The person's name\n    \n    Returns:\n        A greeting message\n    \"\"\"\n    return f\"Hello, {name}!\"\n\n# Multiple types\nfrom typing import List, Dict, Optional, Union\n\ndef process_data(data: List[int], config: Dict[str, str]) -> Optional[float]:\n    \"\"\"\n    Process data according to configuration.\n    \n    Args:\n        data: List of integers to process\n        config: Configuration dictionary\n    \n    Returns:\n        Processed result as float, or None if processing fails\n    \"\"\"\n    if not data:\n        return None\n    return sum(data) / len(data)\n\n# Union types (multiple possible types)\ndef format_value(value: Union[int, float, str]) -> str:\n    \"\"\"\n    Format a value as a string.\n    \n    Args:\n        value: An integer, float, or string to format\n    \n    Returns:\n        Formatted string representation\n    \"\"\"\n    return str(value)\n</code></pre>\n\n<h4>Module Docstrings:</h4>\n<pre><code># At the top of a .py file\n\"\"\"\nMath Utilities Module\n\nThis module provides utility functions for mathematical operations.\n\nFunctions:\n    - calculate_area: Calculate the area of a circle\n    - calculate_volume: Calculate the volume of a sphere\n    - calculate_perimeter: Calculate the perimeter of a rectangle\n\nExample:\n    >>> from math_utils import calculate_area\n    >>> calculate_area(5)\n    78.53975\n\nAuthor: Your Name\nDate: 2024-01-15\n\"\"\"\n\ndef calculate_area(radius):\n    \"\"\"Calculate the area of a circle.\"\"\"\n    return 3.14159 * radius ** 2\n</code></pre>\n\n<h4>Class Docstrings:</h4>\n<pre><code>class BankAccount:\n    \"\"\"\n    A bank account with deposit and withdrawal capabilities.\n    \n    Attributes:\n        account_number (str): Unique account identifier\n        balance (float): Current account balance\n        owner (str): Account owner's name\n    \n    Example:\n        >>> account = BankAccount('12345', 'Alice', 1000)\n        >>> account.deposit(500)\n        >>> account.balance\n        1500.0\n    \"\"\"\n    \n    def __init__(self, account_number, owner, initial_balance=0):\n        \"\"\"\n        Initialize a new bank account.\n        \n        Args:\n            account_number (str): Unique account identifier\n            owner (str): Account owner's name\n            initial_balance (float): Starting balance (default: 0)\n        \"\"\"\n        self.account_number = account_number\n        self.owner = owner\n        self.balance = initial_balance\n    \n    def deposit(self, amount):\n        \"\"\"\n        Deposit money into the account.\n        \n        Args:\n            amount (float): Amount to deposit (must be positive)\n        \n        Raises:\n            ValueError: If amount is negative\n        \"\"\"\n        if amount < 0:\n            raise ValueError(\"Deposit amount must be positive\")\n        self.balance += amount\n</code></pre>\n\n<h4>Doctest - Executable Documentation:</h4>\n<pre><code>def factorial(n):\n    \"\"\"\n    Calculate the factorial of n.\n    \n    Args:\n        n (int): A non-negative integer\n    \n    Returns:\n        int: The factorial of n\n    \n    Examples:\n        >>> factorial(0)\n        1\n        >>> factorial(1)\n        1\n        >>> factorial(5)\n        120\n        >>> factorial(10)\n        3628800\n    \"\"\"\n    if n == 0:\n        return 1\n    return n * factorial(n - 1)\n\n# Run doctests\nif __name__ == \"__main__\":\n    import doctest\n    doctest.testmod()\n    # If all tests pass, no output\n    # If tests fail, shows failures\n</code></pre>\n\n<h4>Practical Examples:</h4>\n<pre><code># API endpoint documentation\ndef get_user(user_id: int) -> Dict[str, any]:\n    \"\"\"\n    Retrieve user information from the database.\n    \n    Args:\n        user_id: The unique identifier for the user\n    \n    Returns:\n        A dictionary containing user information:\n        - 'id': User ID\n        - 'name': Full name\n        - 'email': Email address\n        - 'created_at': Account creation timestamp\n    \n    Raises:\n        UserNotFoundError: If user_id doesn't exist\n        DatabaseError: If database connection fails\n    \n    Example:\n        >>> user = get_user(123)\n        >>> print(user['name'])\n        'Alice Johnson'\n    \"\"\"\n    # Implementation here\n    pass\n\n# Data processing function\ndef clean_data(data: List[Dict]) -> List[Dict]:\n    \"\"\"\n    Clean and validate input data.\n    \n    Performs the following operations:\n    1. Remove entries with missing required fields\n    2. Convert date strings to datetime objects\n    3. Normalize text fields to lowercase\n    4. Remove duplicate entries\n    \n    Args:\n        data: List of dictionaries containing raw data\n    \n    Returns:\n        List of cleaned and validated dictionaries\n    \n    Note:\n        This function modifies the data in-place for performance.\n        Make a copy if you need to preserve the original.\n    \"\"\"\n    # Implementation here\n    pass\n</code></pre>\n\n<h4>Documentation Tools:</h4>\n<pre><code># Sphinx - Generate HTML documentation from docstrings\n# Install: pip install sphinx\n\n# Type checking with mypy\n# Install: pip install mypy\n# Run: mypy your_script.py\n\ndef add(a: int, b: int) -> int:\n    \"\"\"Add two integers.\"\"\"\n    return a + b\n\n# mypy will catch type errors:\n# result = add(\"5\", \"3\")  # Error: Argument has incompatible type\n</code></pre>\n\n<h4>Quick Reference:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Element</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td><strong>Summary</strong></td>\n        <td>One-line description</td>\n        <td>\"Calculate the area of a circle.\"</td>\n    </tr>\n    <tr>\n        <td><strong>Args/Parameters</strong></td>\n        <td>Function parameters</td>\n        <td>radius (float): Circle radius</td>\n    </tr>\n    <tr>\n        <td><strong>Returns</strong></td>\n        <td>Return value description</td>\n        <td>float: The calculated area</td>\n    </tr>\n    <tr>\n        <td><strong>Raises</strong></td>\n        <td>Possible exceptions</td>\n        <td>ValueError: If radius is negative</td>\n    </tr>\n    <tr>\n        <td><strong>Example</strong></td>\n        <td>Usage examples</td>\n        <td>>>> calculate_area(5)\\n78.5</td>\n    </tr>\n</table>\n        ",
  "starter_code": "# TODO: Create a function 'calculate_discount' with a proper docstring\n# Function should:\n# - Take parameters: price (float) and discount_percent (float)\n# - Return the discounted price\n# - Include a docstring with:\n#   * Summary\n#   * Args section\n#   * Returns section\n#   * Example\n# - Use type hints\n#\n# Test: calculate_discount(100, 20) should return 80.0\n\n",
  "solution_code": "def calculate_discount(price: float, discount_percent: float) -> float:\n    \"\"\"\n    Calculate the price after applying a discount.\n    \n    Args:\n        price: The original price\n        discount_percent: The discount percentage (0-100)\n    \n    Returns:\n        The discounted price\n    \n    Example:\n        >>> calculate_discount(100, 20)\n        80.0\n    \"\"\"\n    discount_amount = price * (discount_percent / 100)\n    return price - discount_amount\n\nresult = calculate_discount(100, 20)\nprint(result)",
  "learning_objectives": [
    "Write clear and informative docstrings for functions",
    "Use type hints to document parameter and return types",
    "Follow docstring conventions (Google, NumPy styles)",
    "Create executable documentation with doctest"
  ],
  "key_concepts": [
    "Docstrings",
    "Type Hints",
    "Documentation",
    "__doc__ Attribute",
    "Google Style",
    "NumPy Style",
    "doctest",
    "help() Function"
  ],
  "test_cases": [
    {
      "name": "Test: Calculate discount",
      "input": "",
      "expected_output": "80.0"
    }
  ],
  "hints": [
    "Start with triple quotes: \"\"\"",
    "Include one-line summary first",
    "Document Args: price and discount_percent",
    "Document Returns: discounted price",
    "Add type hints: def func(price: float, discount_percent: float) -> float",
    "Formula: price - (price * discount_percent / 100)"
  ],
  "visual_content": {
    "template": {
      "type": "docstring_template",
      "google_style": "def function_name(param1, param2):\\n    \\\"\\\"\\\"\\n    Brief description.\\n    \\n    Args:\\n        param1 (type): Description\\n        param2 (type): Description\\n    \\n    Returns:\\n        type: Description\\n    \\n    Raises:\\n        ExceptionType: When this happens\\n    \\n    Example:\\n        >>> function_name(1, 2)\\n        3\\n    \\\"\\\"\\\"\\n    pass",
      "numpy_style": "def function_name(param1, param2):\\n    \\\"\\\"\\\"\\n    Brief description.\\n    \\n    Parameters\\n    ----------\\n    param1 : type\\n        Description\\n    param2 : type\\n        Description\\n    \\n    Returns\\n    -------\\n    type\\n        Description\\n    \\n    Examples\\n    --------\\n    >>> function_name(1, 2)\\n    3\\n    \\\"\\\"\\\"\\n    pass"
    }
  }
}
