{
  "module_id": 1,
  "title": "Comparison & Logical Operators",
  "order": 6,
  "reading_content": "\n<h3>Comparison and Logical Operators</h3>\n<p>These operators are essential for making decisions and creating conditions in your programs.</p>\n\n<h4>Comparison Operators:</h4>\n<p>Comparison operators return Boolean values (True or False).</p>\n<pre><code># Equal to (==)\nprint(5 == 5)   # True\nprint(5 == 3)   # False\n\n# Not equal to (!=)\nprint(5 != 3)   # True\nprint(5 != 5)   # False\n\n# Greater than (>)\nprint(10 > 5)   # True\nprint(3 > 7)    # False\n\n# Less than (<)\nprint(3 < 7)    # True\nprint(10 < 5)   # False\n\n# Greater than or equal to (>=)\nprint(5 >= 5)   # True\nprint(5 >= 3)   # True\nprint(5 >= 7)   # False\n\n# Less than or equal to (<=)\nprint(5 <= 5)   # True\nprint(3 <= 5)   # True\nprint(7 <= 5)   # False\n</code></pre>\n\n<h4>Logical Operators:</h4>\n<p>Logical operators combine multiple conditions.</p>\n<pre><code># AND (and) - Both conditions must be True\nage = 25\nhas_license = True\ncan_drive = age >= 18 and has_license  # True\n\nprint(True and True)    # True\nprint(True and False)   # False\nprint(False and False)  # False\n\n# OR (or) - At least one condition must be True\nis_weekend = False\nis_holiday = True\ncan_relax = is_weekend or is_holiday  # True\n\nprint(True or False)   # True\nprint(False or False)  # False\nprint(True or True)    # True\n\n# NOT (not) - Reverses the boolean value\nis_raining = False\nis_sunny = not is_raining  # True\n\nprint(not True)   # False\nprint(not False)  # True\n</code></pre>\n\n<h4>Operator Precedence:</h4>\n<p>Logical operators have precedence: <strong>not</strong> > <strong>and</strong> > <strong>or</strong></p>\n<pre><code># Complex conditions\nage = 20\nhas_id = True\nis_member = False\n\n# Parentheses for clarity\ncan_enter = (age >= 18 and has_id) or is_member\n\n# Without parentheses (same result due to precedence)\ncan_enter = age >= 18 and has_id or is_member\n</code></pre>\n\n<h4>Chaining Comparisons:</h4>\n<pre><code># Python allows chaining\nx = 5\nresult = 1 < x < 10  # True (equivalent to: 1 < x and x < 10)\n\n# Multiple chains\nscore = 75\ngrade_b = 70 <= score < 80  # True\n</code></pre>\n\n<h4>Identity and Membership Operators:</h4>\n<pre><code># is - Identity (same object in memory)\na = [1, 2, 3]\nb = a\nc = [1, 2, 3]\nprint(a is b)  # True (same object)\nprint(a is c)  # False (different objects)\n\n# in - Membership\nfruits = ['apple', 'banana', 'cherry']\nprint('apple' in fruits)      # True\nprint('orange' in fruits)     # False\nprint('orange' not in fruits) # True\n</code></pre>\n        ",
  "starter_code": "# Write a program to check if a person can vote\n# Requirements:\n# 1. Create variable age = 18\n# 2. Create variable is_citizen = True\n# 3. Check if person can vote (age >= 18 AND is_citizen)\n# 4. Print the result as: \"Can vote: True\" or \"Can vote: False\"\n\n",
  "solution_code": "age = 18\nis_citizen = True\n\ncan_vote = age >= 18 and is_citizen\nprint(f\"Can vote: {can_vote}\")",
  "learning_objectives": [
    "Use comparison operators to compare values",
    "Combine conditions with logical operators (and, or, not)",
    "Understand operator precedence in complex conditions",
    "Chain comparison operators for range checking"
  ],
  "key_concepts": ["Comparison Operators", "Logical Operators", "Boolean Logic", "and/or/not", "Operator Chaining"],
  "test_cases": [
    {
      "name": "Test: Voting eligibility",
      "input": "",
      "expected_output": "Can vote: True"
    }
  ],
  "hints": [
    "Use >= to check if age is 18 or greater",
    "Use 'and' to combine both conditions",
    "Use f-string to format the output"
  ],
  "visual_content": {
    "diagram": {
      "type": "truth_table",
      "title": "Logical Operators Truth Table",
      "operators": {
        "AND": [
          {"A": true, "B": true, "result": true},
          {"A": true, "B": false, "result": false},
          {"A": false, "B": true, "result": false},
          {"A": false, "B": false, "result": false}
        ],
        "OR": [
          {"A": true, "B": true, "result": true},
          {"A": true, "B": false, "result": true},
          {"A": false, "B": true, "result": true},
          {"A": false, "B": false, "result": false}
        ],
        "NOT": [
          {"A": true, "result": false},
          {"A": false, "result": true}
        ]
      }
    }
  }
}
