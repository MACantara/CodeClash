{
  "module_id": 3,
  "title": "List Operations & Methods",
  "order": 4,
  "reading_content": "\n<h3>Working with Lists</h3>\n<p>Lists are mutable sequences that come with powerful methods for manipulation.</p>\n\n<h4>Adding Elements:</h4>\n<pre><code># append() - Add to end\nfruits = ['apple', 'banana']\nfruits.append('cherry')\nprint(fruits)  # ['apple', 'banana', 'cherry']\n\n# insert() - Add at specific position\nfruits.insert(1, 'orange')  # Insert at index 1\nprint(fruits)  # ['apple', 'orange', 'banana', 'cherry']\n\n# extend() - Add multiple items\nfruits.extend(['grape', 'mango'])\nprint(fruits)  # ['apple', 'orange', 'banana', 'cherry', 'grape', 'mango']\n\n# + operator - Concatenate lists\nmore_fruits = fruits + ['kiwi', 'pear']\n</code></pre>\n\n<h4>Removing Elements:</h4>\n<pre><code>numbers = [1, 2, 3, 4, 5, 3]\n\n# remove() - Remove first occurrence of value\nnumbers.remove(3)  # Removes first 3\nprint(numbers)  # [1, 2, 4, 5, 3]\n\n# pop() - Remove and return element at index\nlast = numbers.pop()  # Removes last item (3)\nprint(last)  # 3\nprint(numbers)  # [1, 2, 4, 5]\n\nsecond = numbers.pop(1)  # Removes at index 1 (2)\nprint(numbers)  # [1, 4, 5]\n\n# del - Delete by index or slice\ndel numbers[0]  # Delete first item\nprint(numbers)  # [4, 5]\n\n# clear() - Remove all items\nnumbers.clear()\nprint(numbers)  # []\n</code></pre>\n\n<h4>Sorting and Reversing:</h4>\n<pre><code># sort() - Sort in place (modifies original)\nnumbers = [3, 1, 4, 1, 5, 9, 2]\nnumbers.sort()\nprint(numbers)  # [1, 1, 2, 3, 4, 5, 9]\n\n# sort(reverse=True) - Descending order\nnumbers.sort(reverse=True)\nprint(numbers)  # [9, 5, 4, 3, 2, 1, 1]\n\n# sorted() - Return new sorted list (original unchanged)\noriginal = [3, 1, 4]\nsorted_list = sorted(original)\nprint(original)  # [3, 1, 4] - unchanged\nprint(sorted_list)  # [1, 3, 4]\n\n# reverse() - Reverse in place\nnumbers = [1, 2, 3, 4, 5]\nnumbers.reverse()\nprint(numbers)  # [5, 4, 3, 2, 1]\n</code></pre>\n\n<h4>List Slicing:</h4>\n<pre><code>numbers = [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Basic slicing: list[start:end]\nprint(numbers[2:5])    # [2, 3, 4] - indices 2 to 4\nprint(numbers[:4])     # [0, 1, 2, 3] - start to index 3\nprint(numbers[6:])     # [6, 7, 8, 9] - index 6 to end\nprint(numbers[:])      # [0, 1, 2, 3, 4, 5, 6, 7, 8, 9] - full copy\n\n# Step slicing: list[start:end:step]\nprint(numbers[::2])    # [0, 2, 4, 6, 8] - every 2nd item\nprint(numbers[1::2])   # [1, 3, 5, 7, 9] - odd indices\nprint(numbers[::-1])   # [9, 8, 7, 6, 5, 4, 3, 2, 1, 0] - reverse\n\n# Negative indices\nprint(numbers[-3:])    # [7, 8, 9] - last 3 items\nprint(numbers[:-3])    # [0, 1, 2, 3, 4, 5, 6] - all except last 3\n</code></pre>\n\n<h4>Other Useful Methods:</h4>\n<pre><code>numbers = [1, 2, 3, 2, 4, 2, 5]\n\n# count() - Count occurrences\nprint(numbers.count(2))  # 3\n\n# index() - Find first index of value\nprint(numbers.index(4))  # 4 (index of first 4)\n\n# copy() - Create shallow copy\nnumbers_copy = numbers.copy()\nnumbers_copy.append(6)\nprint(numbers)       # [1, 2, 3, 2, 4, 2, 5] - unchanged\nprint(numbers_copy)  # [1, 2, 3, 2, 4, 2, 5, 6]\n\n# in operator - Check membership\nprint(3 in numbers)     # True\nprint(10 in numbers)    # False\n\n# len() - Get length\nprint(len(numbers))     # 7\n\n# min(), max(), sum()\nprint(min(numbers))     # 1\nprint(max(numbers))     # 5\nprint(sum(numbers))     # 21\n</code></pre>\n\n<h4>Practical Examples:</h4>\n<pre><code># Build a shopping cart\ncart = []\ncart.append('milk')\ncart.append('bread')\ncart.extend(['eggs', 'butter'])\nprint(f\"Cart has {len(cart)} items: {cart}\")\n\n# Remove an item\nif 'eggs' in cart:\n    cart.remove('eggs')\n    print(\"Eggs removed\")\n\n# Grade management\ngrades = [85, 92, 78, 95, 88]\ngrades.sort(reverse=True)  # Highest to lowest\naverage = sum(grades) / len(grades)\nprint(f\"Highest: {grades[0]}, Average: {average:.1f}\")\n\n# Remove duplicates (preserve order)\nnumbers = [1, 2, 3, 2, 4, 1, 5]\nunique = []\nfor num in numbers:\n    if num not in unique:\n        unique.append(num)\nprint(unique)  # [1, 2, 3, 4, 5]\n</code></pre>\n\n<h4>Common Mistakes:</h4>\n<pre><code># Mistake: Modifying list while iterating\nnumbers = [1, 2, 3, 4, 5]\nfor num in numbers:\n    if num % 2 == 0:\n        numbers.remove(num)  # ❌ Don't do this!\n\n# Correct: Create new list\nnumbers = [1, 2, 3, 4, 5]\nodd_numbers = [num for num in numbers if num % 2 != 0]\nprint(odd_numbers)  # [1, 3, 5]\n\n# Mistake: sort() returns None\nnumbers = [3, 1, 2]\nsorted_nums = numbers.sort()  # ❌ sorted_nums is None!\nprint(sorted_nums)  # None\n\n# Correct: Use sorted() to get new list\nsorted_nums = sorted(numbers)\n</code></pre>\n        ",
  "starter_code": "# Given this list:\nnumbers = [5, 2, 8, 1, 9, 3, 7]\n\n# TODO:\n# 1. Add the number 4 to the end\n# 2. Remove the number 1 from the list\n# 3. Sort the list in ascending order\n# 4. Print the first 3 numbers\n# 5. Print the length of the list\n\n",
  "solution_code": "numbers = [5, 2, 8, 1, 9, 3, 7]\n\nnumbers.append(4)\nnumbers.remove(1)\nnumbers.sort()\n\nprint(numbers[:3])\nprint(len(numbers))",
  "learning_objectives": [
    "Use list methods to add, remove, and modify elements",
    "Sort and reverse lists in place or create new sorted lists",
    "Use slicing to access and manipulate list sections",
    "Apply list methods to solve practical problems"
  ],
  "key_concepts": [
    "append()",
    "insert()",
    "remove()",
    "pop()",
    "sort()/sorted()",
    "reverse()",
    "List Slicing",
    "count()/index()"
  ],
  "test_cases": [
    {
      "name": "Test: List operations",
      "input": "",
      "expected_output": "[2, 3, 4]\n7"
    }
  ],
  "hints": [
    "Use .append(4) to add 4 to the end",
    "Use .remove(1) to remove the number 1",
    "Use .sort() to sort in ascending order",
    "Use [:3] to get first 3 elements",
    "Use len() to get the length"
  ],
  "visual_content": {
    "reference_table": {
      "type": "list_methods",
      "categories": [
        {
          "category": "Adding",
          "methods": [
            {"name": "append(x)", "description": "Add x to end"},
            {"name": "insert(i, x)", "description": "Insert x at index i"},
            {"name": "extend(list)", "description": "Add all items from list"}
          ]
        },
        {
          "category": "Removing",
          "methods": [
            {"name": "remove(x)", "description": "Remove first x"},
            {"name": "pop(i)", "description": "Remove and return at index i"},
            {"name": "clear()", "description": "Remove all items"}
          ]
        },
        {
          "category": "Organizing",
          "methods": [
            {"name": "sort()", "description": "Sort in place"},
            {"name": "reverse()", "description": "Reverse in place"},
            {"name": "copy()", "description": "Return shallow copy"}
          ]
        },
        {
          "category": "Searching",
          "methods": [
            {"name": "count(x)", "description": "Count occurrences of x"},
            {"name": "index(x)", "description": "Find first index of x"}
          ]
        }
      ]
    }
  }
}
