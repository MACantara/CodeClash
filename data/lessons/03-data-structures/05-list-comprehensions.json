{
  "module_id": 3,
  "title": "List Comprehensions",
  "order": 5,
  "reading_content": "\n<h3>List Comprehensions</h3>\n<p>List comprehensions provide a concise way to create lists based on existing sequences.</p>\n\n<h4>Basic Syntax:</h4>\n<pre><code># Traditional way: Using a loop\nsquares = []\nfor x in range(5):\n    squares.append(x ** 2)\nprint(squares)  # [0, 1, 4, 9, 16]\n\n# List comprehension: One line!\nsquares = [x ** 2 for x in range(5)]\nprint(squares)  # [0, 1, 4, 9, 16]\n\n# Syntax: [expression for item in iterable]\n</code></pre>\n\n<h4>List Comprehensions with Conditions:</h4>\n<pre><code># Get even numbers\n# Traditional way\nevens = []\nfor x in range(10):\n    if x % 2 == 0:\n        evens.append(x)\nprint(evens)  # [0, 2, 4, 6, 8]\n\n# List comprehension\nevens = [x for x in range(10) if x % 2 == 0]\nprint(evens)  # [0, 2, 4, 6, 8]\n\n# Syntax: [expression for item in iterable if condition]\n\n# Filter strings by length\nwords = ['hi', 'hello', 'hey', 'goodbye']\nlong_words = [word for word in words if len(word) > 3]\nprint(long_words)  # ['hello', 'goodbye']\n</code></pre>\n\n<h4>Transforming Data:</h4>\n<pre><code># Convert to uppercase\nfruits = ['apple', 'banana', 'cherry']\nupper_fruits = [fruit.upper() for fruit in fruits]\nprint(upper_fruits)  # ['APPLE', 'BANANA', 'CHERRY']\n\n# Extract first letter\nfirst_letters = [fruit[0] for fruit in fruits]\nprint(first_letters)  # ['a', 'b', 'c']\n\n# Multiple operations\nprices = [10, 20, 30, 40]\ndiscounted = [price * 0.8 for price in prices]\nprint(discounted)  # [8.0, 16.0, 24.0, 32.0]\n</code></pre>\n\n<h4>If-Else in List Comprehensions:</h4>\n<pre><code># Classify numbers as even or odd\nnumbers = [1, 2, 3, 4, 5]\nlabels = ['even' if x % 2 == 0 else 'odd' for x in numbers]\nprint(labels)  # ['odd', 'even', 'odd', 'even', 'odd']\n\n# Syntax: [expression_if_true if condition else expression_if_false for item in iterable]\n\n# Cap numbers at maximum\nvalues = [5, 15, 25, 35]\ncapped = [x if x <= 20 else 20 for x in values]\nprint(capped)  # [5, 15, 20, 20]\n</code></pre>\n\n<h4>Nested List Comprehensions:</h4>\n<pre><code># Flatten 2D list\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nflattened = [num for row in matrix for num in row]\nprint(flattened)  # [1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n# Create 2D list (matrix)\nmatrix = [[i * j for j in range(1, 4)] for i in range(1, 4)]\nprint(matrix)  # [[1, 2, 3], [2, 4, 6], [3, 6, 9]]\n\n# Pairs from two lists\ncolors = ['red', 'green', 'blue']\nitems = ['shirt', 'hat']\npairs = [f\"{color} {item}\" for color in colors for item in items]\nprint(pairs)  # ['red shirt', 'red hat', 'green shirt', ...]\n</code></pre>\n\n<h4>Practical Examples:</h4>\n<pre><code># Parse CSV data\nraw_data = \"10,20,30,40,50\"\nnumbers = [int(x) for x in raw_data.split(',')]\nprint(numbers)  # [10, 20, 30, 40, 50]\n\n# Extract numbers from mixed list\nmixed = [1, 'hello', 3.5, 'world', 7, None]\nnumbers = [x for x in mixed if isinstance(x, (int, float)) and x is not None]\nprint(numbers)  # [1, 3.5, 7]\n\n# Filter and transform email addresses\nemails = ['user1@gmail.com', 'user2@yahoo.com', 'user3@gmail.com']\ngmail_users = [email.split('@')[0] for email in emails if 'gmail' in email]\nprint(gmail_users)  # ['user1', 'user3']\n\n# Create dict from two lists\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 25, 'NYC']\nuser = {k: v for k, v in zip(keys, values)}\nprint(user)  # {'name': 'Alice', 'age': 25, 'city': 'NYC'}\n</code></pre>\n\n<h4>When to Use List Comprehensions:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Use When</th>\n        <th>Avoid When</th>\n    </tr>\n    <tr>\n        <td>Simple transformations and filters</td>\n        <td>Complex logic (use regular loops)</td>\n    </tr>\n    <tr>\n        <td>Creating new lists from existing data</td>\n        <td>Side effects needed (printing, file I/O)</td>\n    </tr>\n    <tr>\n        <td>Code readability is maintained</td>\n        <td>Multiple nested levels (hard to read)</td>\n    </tr>\n</table>\n\n<h4>Performance Benefits:</h4>\n<pre><code># List comprehensions are faster than loops\nimport time\n\n# Using loop\nstart = time.time()\nsquares_loop = []\nfor x in range(1000000):\n    squares_loop.append(x ** 2)\nloop_time = time.time() - start\n\n# Using comprehension\nstart = time.time()\nsquares_comp = [x ** 2 for x in range(1000000)]\ncomp_time = time.time() - start\n\nprint(f\"Loop: {loop_time:.3f}s, Comprehension: {comp_time:.3f}s\")\n# Comprehension is typically 20-30% faster!\n</code></pre>\n        ",
  "starter_code": "# Given this list of numbers:\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# TODO: Use list comprehensions to:\n# 1. Create a list of squares of even numbers only\n# 2. Print the result\n#\n# Expected: [4, 16, 36, 64, 100]\n\n",
  "solution_code": "numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\nsquares_of_evens = [x ** 2 for x in numbers if x % 2 == 0]\nprint(squares_of_evens)",
  "learning_objectives": [
    "Write basic list comprehensions to create new lists",
    "Add conditions to filter items in comprehensions",
    "Transform data using expressions in comprehensions",
    "Recognize when list comprehensions improve code readability"
  ],
  "key_concepts": [
    "List Comprehensions",
    "[x for x in iterable]",
    "Conditional Filtering",
    "Data Transformation",
    "Nested Comprehensions",
    "if-else in Comprehensions"
  ],
  "test_cases": [
    {
      "name": "Test: Squares of even numbers",
      "input": "",
      "expected_output": "[4, 16, 36, 64, 100]"
    }
  ],
  "hints": [
    "Syntax: [expression for item in iterable if condition]",
    "Expression is x ** 2 (square the number)",
    "Condition is x % 2 == 0 (even numbers)",
    "Combine: [x ** 2 for x in numbers if x % 2 == 0]"
  ],
  "visual_content": {
    "diagram": {
      "type": "syntax_breakdown",
      "title": "List Comprehension Anatomy",
      "parts": [
        {
          "code": "[x ** 2 for x in range(5) if x % 2 == 0]",
          "breakdown": [
            {"part": "x ** 2", "label": "Expression (what to include)"},
            {"part": "for x in range(5)", "label": "Iterator (where to get items)"},
            {"part": "if x % 2 == 0", "label": "Condition (filter - optional)"}
          ]
        }
      ],
      "examples": [
        {
          "description": "Basic",
          "code": "[x for x in range(5)]",
          "result": "[0, 1, 2, 3, 4]"
        },
        {
          "description": "With transformation",
          "code": "[x * 2 for x in range(5)]",
          "result": "[0, 2, 4, 6, 8]"
        },
        {
          "description": "With filter",
          "code": "[x for x in range(5) if x > 2]",
          "result": "[3, 4]"
        },
        {
          "description": "With if-else",
          "code": "['even' if x % 2 == 0 else 'odd' for x in range(3)]",
          "result": "['even', 'odd', 'even']"
        }
      ]
    }
  }
}
