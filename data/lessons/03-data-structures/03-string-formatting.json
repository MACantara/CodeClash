{
  "module_id": 3,
  "title": "String Formatting",
  "order": 3,
  "reading_content": "\n<h3>String Formatting in Python</h3>\n<p>Python offers several ways to format strings and insert variables into text.</p>\n\n<h4>1. F-Strings (Python 3.6+) - Recommended:</h4>\n<pre><code># Basic f-string\nname = \"Alice\"\nage = 25\nprint(f\"My name is {name} and I'm {age} years old\")\n# Output: My name is Alice and I'm 25 years old\n\n# Expressions inside f-strings\nprint(f\"Next year I'll be {age + 1}\")\nprint(f\"5 + 3 = {5 + 3}\")\n\n# Calling methods\nname = \"python\"\nprint(f\"Language: {name.upper()}\")\n# Output: Language: PYTHON\n</code></pre>\n\n<h4>F-String Formatting Options:</h4>\n<pre><code># Number formatting\npi = 3.14159265\nprint(f\"Pi: {pi:.2f}\")      # 2 decimal places: 3.14\nprint(f\"Pi: {pi:.4f}\")      # 4 decimal places: 3.1416\n\n# Padding and alignment\nname = \"Alice\"\nprint(f\"{name:>10}\")        # Right align (10 chars): \"     Alice\"\nprint(f\"{name:<10}\")        # Left align: \"Alice     \"\nprint(f\"{name:^10}\")        # Center: \"  Alice   \"\n\n# Numbers with commas\nbig_num = 1000000\nprint(f\"{big_num:,}\")       # 1,000,000\n\n# Percentage\nratio = 0.85\nprint(f\"Success rate: {ratio:.1%}\")  # 85.0%\n</code></pre>\n\n<h4>2. .format() Method:</h4>\n<pre><code># Basic usage\nname = \"Bob\"\nage = 30\nprint(\"My name is {} and I'm {} years old\".format(name, age))\n\n# Using indices\nprint(\"{0} is {1} years old. {0} loves Python.\".format(name, age))\n# Bob is 30 years old. Bob loves Python.\n\n# Using named placeholders\nprint(\"{name} is {age} years old\".format(name=\"Charlie\", age=35))\n\n# Formatting numbers\npi = 3.14159\nprint(\"{:.2f}\".format(pi))  # 3.14\n</code></pre>\n\n<h4>3. % Formatting (Old Style):</h4>\n<pre><code># Basic usage\nname = \"David\"\nage = 40\nprint(\"My name is %s and I'm %d years old\" % (name, age))\n\n# Format specifiers\nprint(\"Integer: %d\" % 42)         # Integer\nprint(\"Float: %.2f\" % 3.14159)   # Float with 2 decimals: 3.14\nprint(\"String: %s\" % \"hello\")    # String\n</code></pre>\n\n<h4>Comparison - Which to Use?</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Method</th>\n        <th>Pros</th>\n        <th>Cons</th>\n    </tr>\n    <tr>\n        <td><strong>f-strings</strong></td>\n        <td>Fast, readable, concise, modern</td>\n        <td>Python 3.6+ only</td>\n    </tr>\n    <tr>\n        <td><strong>.format()</strong></td>\n        <td>Compatible with older Python</td>\n        <td>More verbose than f-strings</td>\n    </tr>\n    <tr>\n        <td><strong>% formatting</strong></td>\n        <td>Compatible with very old Python</td>\n        <td>Outdated, less readable</td>\n    </tr>\n</table>\n\n<h4>Practical Examples:</h4>\n<pre><code># Receipt formatting\nitem = \"Coffee\"\nprice = 4.50\ntax = 0.45\ntotal = price + tax\n\nprint(f\"Item: {item}\")\nprint(f\"Price: ${price:.2f}\")\nprint(f\"Tax: ${tax:.2f}\")\nprint(f\"Total: ${total:.2f}\")\n\n# Table formatting\nprint(f\"{'Name':<10} {'Age':>5} {'City':<10}\")\nprint(f\"{'Alice':<10} {25:>5} {'NYC':<10}\")\nprint(f\"{'Bob':<10} {30:>5} {'LA':<10}\")\n\n# Progress indicator\nprogress = 0.67\nprint(f\"Progress: [{progress:.0%}]\")\n\n# Scientific notation\nlarge = 12345678\nprint(f\"Large number: {large:e}\")  # 1.234568e+07\n</code></pre>\n\n<h4>Multi-line F-Strings:</h4>\n<pre><code>name = \"Alice\"\nage = 25\njob = \"Engineer\"\n\nmessage = f\"\"\"\nEmployee Profile:\n  Name: {name}\n  Age: {age}\n  Job: {job}\n  Years to retirement: {65 - age}\n\"\"\"\nprint(message)\n</code></pre>\n        ",
  "starter_code": "# Given these variables:\nproduct = \"Laptop\"\nprice = 999.99\ndiscount = 0.15\n\n# TODO:\n# 1. Calculate the final price after discount\n# 2. Use an f-string to print:\n#    \"Product: [product]\"\n#    \"Original Price: $[price with 2 decimals]\"\n#    \"Discount: [discount as percentage]\"\n#    \"Final Price: $[final_price with 2 decimals]\"\n\n",
  "solution_code": "product = \"Laptop\"\nprice = 999.99\ndiscount = 0.15\n\nfinal_price = price * (1 - discount)\n\nprint(f\"Product: {product}\")\nprint(f\"Original Price: ${price:.2f}\")\nprint(f\"Discount: {discount:.0%}\")\nprint(f\"Final Price: ${final_price:.2f}\")",
  "learning_objectives": [
    "Use f-strings for modern string formatting",
    "Format numbers with decimal places and percentages",
    "Apply alignment and padding in formatted strings",
    "Choose the appropriate formatting method for different scenarios"
  ],
  "key_concepts": [
    "F-Strings",
    ".format() Method",
    "Number Formatting",
    "Alignment",
    "Decimal Places",
    "Percentage Formatting",
    "String Interpolation"
  ],
  "test_cases": [
    {
      "name": "Test: Format product information",
      "input": "",
      "expected_output": "Product: Laptop\nOriginal Price: $999.99\nDiscount: 15%\nFinal Price: $849.99"
    }
  ],
  "hints": [
    "Calculate final_price = price * (1 - discount)",
    "Use f-strings: f\"Text {variable}\"",
    "Format decimals: {price:.2f} for 2 decimal places",
    "Format percentage: {discount:.0%} for whole percentage"
  ],
  "visual_content": {
    "comparison_table": {
      "type": "formatting_syntax",
      "examples": [
        {
          "method": "F-String",
          "syntax": "f\"Hello {name}\"",
          "example": "name='Alice' → 'Hello Alice'"
        },
        {
          "method": ".format()",
          "syntax": "\"Hello {}\".format(name)",
          "example": "name='Alice' → 'Hello Alice'"
        },
        {
          "method": "% Formatting",
          "syntax": "\"Hello %s\" % name",
          "example": "name='Alice' → 'Hello Alice'"
        }
      ]
    }
  }
}
