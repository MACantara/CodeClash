{
  "module_id": 3,
  "title": "Sets & Set Operations",
  "order": 8,
  "reading_content": "\n<h3>Understanding Sets</h3>\n<p>Sets are unordered collections of unique elements. Perfect for removing duplicates and mathematical set operations.</p>\n\n<h4>Creating Sets:</h4>\n<pre><code># Using curly braces\nfruits = {'apple', 'banana', 'cherry'}\nprint(fruits)  # {'apple', 'banana', 'cherry'}\n\n# Using set() constructor\nnumbers = set([1, 2, 3, 2, 1])  # Duplicates removed!\nprint(numbers)  # {1, 2, 3}\n\n# From string (unique characters)\nletters = set('hello')\nprint(letters)  # {'h', 'e', 'l', 'o'} - only unique chars\n\n# Empty set (must use set(), not {})\nempty = set()\nprint(empty)  # set()\nprint(type(empty))  # <class 'set'>\n\n# Note: {} creates empty dict, not set!\nnot_a_set = {}\nprint(type(not_a_set))  # <class 'dict'>\n</code></pre>\n\n<h4>Key Characteristics:</h4>\n<pre><code># Unordered - no indexing\nfruits = {'apple', 'banana', 'cherry'}\n# print(fruits[0])  # ❌ TypeError: 'set' object is not subscriptable\n\n# Unique elements only\nnumbers = {1, 2, 3, 2, 1}\nprint(numbers)  # {1, 2, 3} - duplicates removed\n\n# Mutable - can add/remove items\nfruits.add('date')\nprint(fruits)  # {'apple', 'banana', 'cherry', 'date'}\n\n# Elements must be immutable (hashable)\nvalid_set = {1, 'hello', (1, 2)}  # ✓ int, str, tuple\n# invalid_set = {[1, 2]}  # ❌ TypeError: unhashable type: 'list'\n</code></pre>\n\n<h4>Adding and Removing Elements:</h4>\n<pre><code>fruits = {'apple', 'banana'}\n\n# add() - Add single element\nfruits.add('cherry')\nprint(fruits)  # {'apple', 'banana', 'cherry'}\n\n# Adding duplicate has no effect\nfruits.add('apple')\nprint(fruits)  # Still {'apple', 'banana', 'cherry'}\n\n# update() - Add multiple elements\nfruits.update(['date', 'elderberry'])\nprint(fruits)  # All added\n\n# update() can take any iterable\nfruits.update('fg')  # Adds 'f' and 'g'\nprint(fruits)  # {'apple', 'banana', ..., 'f', 'g'}\n\n# remove() - Remove element (KeyError if not found)\nfruits.remove('apple')\nprint(fruits)  # apple removed\n# fruits.remove('xyz')  # ❌ KeyError\n\n# discard() - Remove element (no error if not found)\nfruits.discard('banana')  # Removed\nfruits.discard('xyz')     # No error!\n\n# pop() - Remove and return arbitrary element\nitem = fruits.pop()\nprint(item)  # Some element\nprint(fruits)  # Element removed\n\n# clear() - Remove all elements\nfruits.clear()\nprint(fruits)  # set()\n</code></pre>\n\n<h4>Set Operations:</h4>\n<pre><code>set1 = {1, 2, 3, 4}\nset2 = {3, 4, 5, 6}\n\n# Union - All elements from both sets\nprint(set1 | set2)  # {1, 2, 3, 4, 5, 6}\nprint(set1.union(set2))  # Same\n\n# Intersection - Elements in both sets\nprint(set1 & set2)  # {3, 4}\nprint(set1.intersection(set2))  # Same\n\n# Difference - Elements in set1 but not set2\nprint(set1 - set2)  # {1, 2}\nprint(set1.difference(set2))  # Same\n\n# Symmetric Difference - Elements in either set, but not both\nprint(set1 ^ set2)  # {1, 2, 5, 6}\nprint(set1.symmetric_difference(set2))  # Same\n</code></pre>\n\n<h4>Set Comparisons:</h4>\n<pre><code>set1 = {1, 2, 3}\nset2 = {1, 2, 3, 4, 5}\nset3 = {1, 2, 3}\n\n# Subset - All elements of set1 in set2?\nprint(set1 <= set2)  # True (set1 is subset)\nprint(set1.issubset(set2))  # True\n\n# Superset - All elements of set2 in set1?\nprint(set2 >= set1)  # True (set2 is superset)\nprint(set2.issuperset(set1))  # True\n\n# Equality\nprint(set1 == set3)  # True\nprint(set1 == set2)  # False\n\n# Disjoint - No common elements?\nset4 = {7, 8, 9}\nprint(set1.isdisjoint(set4))  # True (no overlap)\nprint(set1.isdisjoint(set2))  # False (overlap: 1,2,3)\n</code></pre>\n\n<h4>Practical Examples:</h4>\n<pre><code># Remove duplicates from list\nnumbers = [1, 2, 3, 2, 1, 4, 3, 5]\nunique = list(set(numbers))\nprint(unique)  # [1, 2, 3, 4, 5] (order may vary)\n\n# Find unique words in text\ntext = \"the quick brown fox jumps over the lazy dog\"\nwords = text.split()\nunique_words = set(words)\nprint(f\"Total words: {len(words)}, Unique: {len(unique_words)}\")\n\n# Check common elements\nclass1 = {'Alice', 'Bob', 'Charlie'}\nclass2 = {'Bob', 'David', 'Eve'}\ncommon_students = class1 & class2\nprint(f\"Students in both: {common_students}\")  # {'Bob'}\n\n# Find missing elements\nrequired = {'name', 'email', 'age', 'city'}\nprovided = {'name', 'email'}\nmissing = required - provided\nprint(f\"Missing fields: {missing}\")  # {'age', 'city'}\n\n# Combine unique items from multiple sources\nsource1 = ['apple', 'banana', 'cherry']\nsource2 = ['banana', 'date', 'elderberry']\nsource3 = ['cherry', 'fig', 'grape']\nall_unique = set(source1) | set(source2) | set(source3)\nprint(all_unique)  # All unique fruits\n</code></pre>\n\n<h4>Set Comprehensions:</h4>\n<pre><code># Similar to list comprehensions\nsquares = {x**2 for x in range(5)}\nprint(squares)  # {0, 1, 4, 9, 16}\n\n# Filter with condition\nevens = {x for x in range(10) if x % 2 == 0}\nprint(evens)  # {0, 2, 4, 6, 8}\n\n# Extract unique characters\ntext = \"hello world\"\nvowels = {char for char in text if char in 'aeiou'}\nprint(vowels)  # {'e', 'o'}\n</code></pre>\n\n<h4>Frozen Sets (Immutable):</h4>\n<pre><code># frozenset - Immutable version of set\nimmutable_set = frozenset([1, 2, 3])\nprint(immutable_set)  # frozenset({1, 2, 3})\n\n# Can't modify\n# immutable_set.add(4)  # ❌ AttributeError\n\n# Can be used as dict keys (unlike regular sets)\nsets_dict = {\n    frozenset([1, 2]): 'Set A',\n    frozenset([3, 4]): 'Set B'\n}\nprint(sets_dict[frozenset([1, 2])])  # 'Set A'\n</code></pre>\n\n<h4>When to Use Sets:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Use Sets When</th>\n        <th>Use Lists When</th>\n    </tr>\n    <tr>\n        <td>You need unique elements only</td>\n        <td>Duplicates are allowed/needed</td>\n    </tr>\n    <tr>\n        <td>Order doesn't matter</td>\n        <td>Order is important</td>\n    </tr>\n    <tr>\n        <td>Fast membership testing (x in set)</td>\n        <td>Need indexing (list[0])</td>\n    </tr>\n    <tr>\n        <td>Mathematical set operations needed</td>\n        <td>Need to maintain sequence</td>\n    </tr>\n</table>\n        ",
  "starter_code": "# Given these two lists with duplicates:\nlist1 = [1, 2, 3, 4, 5, 3, 2]\nlist2 = [4, 5, 6, 7, 8, 5, 4]\n\n# TODO:\n# 1. Convert both lists to sets (removing duplicates)\n# 2. Find elements that appear in BOTH sets (intersection)\n# 3. Find elements that appear in EITHER set (union)\n# 4. Find elements only in list1 (difference)\n# 5. Print all three results\n\n",
  "solution_code": "list1 = [1, 2, 3, 4, 5, 3, 2]\nlist2 = [4, 5, 6, 7, 8, 5, 4]\n\nset1 = set(list1)\nset2 = set(list2)\n\nintersection = set1 & set2\nunion = set1 | set2\ndifference = set1 - set2\n\nprint(f\"Both: {sorted(intersection)}\")\nprint(f\"Either: {sorted(union)}\")\nprint(f\"Only in list1: {sorted(difference)}\")",
  "learning_objectives": [
    "Create and manipulate sets to store unique elements",
    "Use set operations for union, intersection, and difference",
    "Remove duplicates from collections using sets",
    "Apply sets for membership testing and data comparison"
  ],
  "key_concepts": [
    "Sets",
    "Unique Elements",
    "Union (|)",
    "Intersection (&)",
    "Difference (-)",
    "add()/remove()/discard()",
    "Set Comprehensions",
    "frozenset"
  ],
  "test_cases": [
    {
      "name": "Test: Set operations",
      "input": "",
      "expected_output": "Both: [4, 5]\nEither: [1, 2, 3, 4, 5, 6, 7, 8]\nOnly in list1: [1, 2, 3]"
    }
  ],
  "hints": [
    "Convert to sets: set1 = set(list1), set2 = set(list2)",
    "Intersection: set1 & set2 (elements in both)",
    "Union: set1 | set2 (elements in either)",
    "Difference: set1 - set2 (only in set1)",
    "Use sorted() to sort sets for consistent output"
  ],
  "visual_content": {
    "venn_diagram": {
      "type": "set_operations",
      "examples": [
        {
          "operation": "Union (A | B)",
          "description": "All elements from both sets",
          "visual": "Two overlapping circles, entire area shaded",
          "example": "{1, 2, 3} | {3, 4, 5} = {1, 2, 3, 4, 5}"
        },
        {
          "operation": "Intersection (A & B)",
          "description": "Only elements in both sets",
          "visual": "Two overlapping circles, only overlap shaded",
          "example": "{1, 2, 3} & {3, 4, 5} = {3}"
        },
        {
          "operation": "Difference (A - B)",
          "description": "Elements in A but not in B",
          "visual": "Two overlapping circles, only left circle (minus overlap) shaded",
          "example": "{1, 2, 3} - {3, 4, 5} = {1, 2}"
        },
        {
          "operation": "Symmetric Difference (A ^ B)",
          "description": "Elements in either set, but not both",
          "visual": "Two overlapping circles, both circles shaded except overlap",
          "example": "{1, 2, 3} ^ {3, 4, 5} = {1, 2, 4, 5}"
        }
      ]
    }
  }
}
