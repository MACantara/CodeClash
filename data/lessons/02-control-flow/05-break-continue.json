{
  "module_id": 2,
  "title": "Loop Control: break & continue",
  "order": 5,
  "reading_content": "\n<h3>Loop Control Statements</h3>\n<p>The <code>break</code> and <code>continue</code> statements give you fine control over loop execution.</p>\n\n<h4>The break Statement:</h4>\n<p>The <code>break</code> statement immediately exits the loop, regardless of the loop condition.</p>\n<pre><code># Exit loop when condition is met\nfor num in range(1, 11):\n    if num == 5:\n        break\n    print(num)\n# Output: 1, 2, 3, 4 (stops at 5)\n\n# Search in a list\nfruits = ['apple', 'banana', 'cherry', 'date']\nfor fruit in fruits:\n    print(fruit)\n    if fruit == 'cherry':\n        print(\"Found cherry!\")\n        break\n# Stops after finding cherry\n</code></pre>\n\n<h4>The continue Statement:</h4>\n<p>The <code>continue</code> statement skips the rest of the current iteration and moves to the next one.</p>\n<pre><code># Skip even numbers\nfor num in range(1, 11):\n    if num % 2 == 0:\n        continue\n    print(num)\n# Output: 1, 3, 5, 7, 9 (skips even numbers)\n\n# Skip empty strings\nwords = ['hello', '', 'world', '', 'python']\nfor word in words:\n    if word == '':\n        continue\n    print(word)\n# Output: hello, world, python\n</code></pre>\n\n<h4>break vs continue:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Statement</th>\n        <th>Action</th>\n        <th>Use Case</th>\n    </tr>\n    <tr>\n        <td><code>break</code></td>\n        <td>Exits the loop completely</td>\n        <td>When you've found what you're looking for</td>\n    </tr>\n    <tr>\n        <td><code>continue</code></td>\n        <td>Skips to next iteration</td>\n        <td>When you want to skip certain items</td>\n    </tr>\n</table>\n\n<h4>Using with While Loops:</h4>\n<pre><code># break with while\ncount = 0\nwhile True:  # Infinite loop\n    count += 1\n    print(count)\n    if count >= 5:\n        break  # Exit after 5 iterations\n\n# continue with while\nnum = 0\nwhile num < 10:\n    num += 1\n    if num % 2 == 0:\n        continue  # Skip even numbers\n    print(num)  # Only prints odd numbers\n</code></pre>\n\n<h4>Nested Loops with break/continue:</h4>\n<pre><code># break only exits the innermost loop\nfor i in range(3):\n    print(f\"Outer loop: {i}\")\n    for j in range(3):\n        if j == 2:\n            break  # Only breaks inner loop\n        print(f\"  Inner loop: {j}\")\n\n# continue skips to next iteration of current loop\nfor i in range(3):\n    for j in range(3):\n        if j == 1:\n            continue  # Skip when j is 1\n        print(f\"i={i}, j={j}\")\n</code></pre>\n\n<h4>Practical Example - Validation Loop:</h4>\n<pre><code># Keep asking until valid input\nwhile True:\n    age = input(\"Enter your age: \")\n    \n    if not age.isdigit():\n        print(\"Please enter a valid number\")\n        continue  # Ask again\n    \n    age = int(age)\n    if age < 0 or age > 120:\n        print(\"Age must be between 0 and 120\")\n        continue  # Ask again\n    \n    # Valid input, exit loop\n    break\n\nprint(f\"Your age is {age}\")\n</code></pre>\n        ",
  "starter_code": "# Write a program that:\n# 1. Uses a for loop to iterate through numbers 1 to 10\n# 2. Skips numbers that are divisible by 3 (use continue)\n# 3. Stops the loop when it reaches 8 (use break)\n# 4. Prints all other numbers\n\n",
  "solution_code": "for num in range(1, 11):\n    if num % 3 == 0:\n        continue\n    if num == 8:\n        break\n    print(num)",
  "learning_objectives": [
    "Use break to exit loops early",
    "Use continue to skip iterations",
    "Understand the difference between break and continue",
    "Apply loop control in nested loops"
  ],
  "key_concepts": ["break", "continue", "Loop Control", "Early Exit", "Skip Iteration"],
  "test_cases": [
    {
      "name": "Test: Skip multiples of 3, stop at 8",
      "input": "",
      "expected_output": "1\n2\n4\n5\n7"
    }
  ],
  "hints": [
    "Use num % 3 == 0 to check if divisible by 3",
    "Use continue after checking for multiples of 3",
    "Use break when num == 8"
  ],
  "visual_content": {
    "flowchart": {
      "type": "loop_control",
      "scenarios": [
        {
          "title": "break Statement",
          "flow": ["Loop Start", "Condition Check", "Execute Code", "Check break condition", "IF break: Exit Loop", "ELSE: Continue Loop"]
        },
        {
          "title": "continue Statement",
          "flow": ["Loop Start", "Condition Check", "Execute Code", "Check continue condition", "IF continue: Skip to Next Iteration", "ELSE: Complete Current Iteration"]
        }
      ]
    }
  }
}
