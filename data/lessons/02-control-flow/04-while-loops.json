{
  "module_id": 2,
  "title": "While Loops",
  "order": 4,
  "reading_content": "\n<h3>While Loops - Condition-Based Repetition</h3>\n<p>A <code>while</code> loop repeats code as long as a condition remains True.</p>\n\n<h4>Basic While Loop Syntax:</h4>\n<pre><code>count = 1\nwhile count <= 5:\n    print(f\"Count: {count}\")\n    count += 1\n# Output: Count: 1, Count: 2, Count: 3, Count: 4, Count: 5\n</code></pre>\n\n<h4>Important Components:</h4>\n<ol>\n    <li><strong>Condition</strong>: Checked before each iteration</li>\n    <li><strong>Loop body</strong>: Code that executes while condition is True</li>\n    <li><strong>Update statement</strong>: Changes variables to eventually make condition False</li>\n</ol>\n\n<h4>Common While Loop Patterns:</h4>\n<pre><code># Countdown\ncount = 5\nwhile count > 0:\n    print(count)\n    count -= 1\nprint(\"Blast off!\")\n\n# User input validation\npassword = \"\"\nwhile password != \"secret\":\n    password = input(\"Enter password: \")\nprint(\"Access granted!\")\n\n# Sum of numbers\ntotal = 0\nnum = 1\nwhile num <= 10:\n    total += num\n    num += 1\nprint(f\"Sum: {total}\")  # 55\n</code></pre>\n\n<h4>Infinite Loops (Be Careful!):</h4>\n<pre><code># This loop never ends - AVOID THIS!\n# count = 1\n# while count <= 5:\n#     print(count)\n#     # Missing: count += 1\n\n# Intentional infinite loop with break\nwhile True:\n    user_input = input(\"Enter 'quit' to exit: \")\n    if user_input == \"quit\":\n        break\n    print(f\"You entered: {user_input}\")\n</code></pre>\n\n<h4>While vs For Loops:</h4>\n<ul>\n    <li><strong>for</strong>: Use when you know the number of iterations</li>\n    <li><strong>while</strong>: Use when iterations depend on a condition</li>\n</ul>\n\n<pre><code># for loop - known iterations\nfor i in range(5):\n    print(i)\n\n# while loop - condition-based\nuser_choice = \"\"\nwhile user_choice != \"exit\":\n    user_choice = input(\"Command: \")\n</code></pre>\n\n<h4>Practical Example - Guessing Game:</h4>\n<pre><code>secret_number = 7\nguess = 0\nattempts = 0\n\nwhile guess != secret_number:\n    guess = int(input(\"Guess the number (1-10): \"))\n    attempts += 1\n    \n    if guess < secret_number:\n        print(\"Too low!\")\n    elif guess > secret_number:\n        print(\"Too high!\")\n    else:\n        print(f\"Correct! You won in {attempts} attempts!\")\n</code></pre>\n        ",
  "starter_code": "# Write a program that prints even numbers from 2 to 10\n# Use a while loop\n# Start with num = 2\n# Increment by 2 each time\n\nnum = 2\n\n",
  "solution_code": "num = 2\nwhile num <= 10:\n    print(num)\n    num += 2",
  "learning_objectives": [
    "Understand while loop syntax and execution",
    "Write condition-based loops",
    "Avoid infinite loops with proper update statements",
    "Choose between for and while loops appropriately"
  ],
  "key_concepts": ["while loop", "Condition-based Iteration", "Loop Control", "Infinite Loops", "Update Statement"],
  "test_cases": [
    {
      "name": "Test: Even numbers 2-10",
      "input": "",
      "expected_output": "2\n4\n6\n8\n10"
    }
  ],
  "hints": [
    "Start with num = 2",
    "Use while num <= 10 as the condition",
    "Print num, then add 2 to num in each iteration"
  ],
  "visual_content": {
    "animation": {
      "type": "loop_execution",
      "title": "While Loop Execution Flow",
      "steps": [
        {"iteration": 0, "condition": "num = 2, check: 2 <= 10", "result": "True", "action": "Print 2, num = 4"},
        {"iteration": 1, "condition": "num = 4, check: 4 <= 10", "result": "True", "action": "Print 4, num = 6"},
        {"iteration": 2, "condition": "num = 6, check: 6 <= 10", "result": "True", "action": "Print 6, num = 8"},
        {"iteration": 3, "condition": "num = 8, check: 8 <= 10", "result": "True", "action": "Print 8, num = 10"},
        {"iteration": 4, "condition": "num = 10, check: 10 <= 10", "result": "True", "action": "Print 10, num = 12"},
        {"iteration": 5, "condition": "num = 12, check: 12 <= 10", "result": "False", "action": "Exit loop"}
      ]
    }
  }
}
