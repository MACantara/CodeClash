{
  "module_id": 6,
  "title": "Creating Your Own Modules",
  "order": 2,
  "reading_content": "\n<h3>Creating Python Modules</h3>\n<p>Any Python file (.py) can be a module! Creating modules helps organize code, promote reusability, and make projects more maintainable.</p>\n\n<h4>Basic Module Creation:</h4>\n<pre><code># File: calculator.py\n\"\"\"A simple calculator module.\"\"\"\n\ndef add(a, b):\n    \"\"\"Add two numbers.\"\"\"\n    return a + b\n\ndef subtract(a, b):\n    \"\"\"Subtract b from a.\"\"\"\n    return a - b\n\ndef multiply(a, b):\n    \"\"\"Multiply two numbers.\"\"\"\n    return a * b\n\ndef divide(a, b):\n    \"\"\"Divide a by b.\"\"\"\n    if b == 0:\n        return \"Error: Division by zero\"\n    return a / b\n\n# Module-level variable\nPI = 3.14159\n\n# Now in another file:\n# import calculator\n# result = calculator.add(5, 3)  # 8\n# print(calculator.PI)  # 3.14159\n</code></pre>\n\n<h4>The __name__ == \"__main__\" Pattern:</h4>\n<pre><code># File: utils.py\n\"\"\"Utility functions.\"\"\"\n\ndef greet(name):\n    return f\"Hello, {name}!\"\n\ndef calculate_area(length, width):\n    return length * width\n\n# Code here runs when module is imported\nprint(\"utils module loaded!\")\n\n# Code here runs ONLY when file is run directly (not imported)\nif __name__ == \"__main__\":\n    print(\"Running utils.py directly\")\n    print(greet(\"Alice\"))  # Test the function\n    print(calculate_area(5, 3))  # Test the function\n\n# When imported: import utils\n# Output: utils module loaded!\n\n# When run directly: python utils.py\n# Output:\n# utils module loaded!\n# Running utils.py directly\n# Hello, Alice!\n# 15\n</code></pre>\n\n<h4>Module Docstrings:</h4>\n<pre><code># File: geometry.py\n\"\"\"Geometry calculation module.\n\nThis module provides functions for calculating areas and perimeters\nof common shapes like circles, rectangles, and triangles.\n\nExample:\n    >>> import geometry\n    >>> geometry.circle_area(5)\n    78.53975\n\"\"\"\n\nimport math\n\ndef circle_area(radius):\n    \"\"\"Calculate area of a circle.\n    \n    Args:\n        radius (float): The radius of the circle.\n    \n    Returns:\n        float: The area of the circle.\n    \"\"\"\n    return math.pi * radius ** 2\n\ndef rectangle_area(length, width):\n    \"\"\"Calculate area of a rectangle.\"\"\"\n    return length * width\n\n# Access docstring\nif __name__ == \"__main__\":\n    print(geometry.__doc__)  # Print module docstring\n    print(circle_area.__doc__)  # Print function docstring\n</code></pre>\n\n<h4>The __all__ Variable:</h4>\n<pre><code># File: my_module.py\n\"\"\"Module with public and private functions.\"\"\"\n\n# Define what gets imported with 'from my_module import *'\n__all__ = ['public_func1', 'public_func2']\n\ndef public_func1():\n    \"\"\"This is public (exported).\"\"\"\n    return \"Public 1\"\n\ndef public_func2():\n    \"\"\"This is public (exported).\"\"\"\n    return \"Public 2\"\n\ndef _private_func():\n    \"\"\"This is private (not exported, starts with _).\"\"\"\n    return \"Private\"\n\ndef internal_func():\n    \"\"\"Not in __all__, so not exported with *.\"\"\"\n    return \"Internal\"\n\n# In another file:\n# from my_module import *\n# public_func1()   # ✅ Works\n# public_func2()   # ✅ Works\n# _private_func()  # ❌ NameError\n# internal_func()  # ❌ NameError\n\n# But can still import explicitly:\n# from my_module import _private_func\n# _private_func()  # ✅ Works (but discouraged)\n</code></pre>\n\n<h4>Organizing Related Functionality:</h4>\n<pre><code># File: text_utils.py\n\"\"\"Text processing utilities.\"\"\"\n\ndef count_words(text):\n    \"\"\"Count words in text.\"\"\"\n    return len(text.split())\n\ndef count_characters(text, include_spaces=False):\n    \"\"\"Count characters in text.\"\"\"\n    if include_spaces:\n        return len(text)\n    return len(text.replace(' ', ''))\n\ndef reverse_text(text):\n    \"\"\"Reverse the text.\"\"\"\n    return text[::-1]\n\ndef capitalize_words(text):\n    \"\"\"Capitalize first letter of each word.\"\"\"\n    return text.title()\n\nif __name__ == \"__main__\":\n    # Test functions when run directly\n    sample = \"hello world python\"\n    print(f\"Words: {count_words(sample)}\")\n    print(f\"Characters: {count_characters(sample)}\")\n    print(f\"Reversed: {reverse_text(sample)}\")\n    print(f\"Capitalized: {capitalize_words(sample)}\")\n</code></pre>\n\n<h4>Module with Class:</h4>\n<pre><code># File: student.py\n\"\"\"Student management module.\"\"\"\n\nclass Student:\n    \"\"\"Represents a student.\"\"\"\n    \n    # Class variable\n    total_students = 0\n    \n    def __init__(self, name, age, grade):\n        self.name = name\n        self.age = age\n        self.grade = grade\n        Student.total_students += 1\n    \n    def get_info(self):\n        return f\"{self.name}, Age: {self.age}, Grade: {self.grade}\"\n    \n    @classmethod\n    def get_total_students(cls):\n        return cls.total_students\n\ndef create_student(name, age, grade):\n    \"\"\"Factory function to create a student.\"\"\"\n    return Student(name, age, grade)\n\nif __name__ == \"__main__\":\n    # Test the module\n    student1 = Student(\"Alice\", 20, \"A\")\n    student2 = create_student(\"Bob\", 21, \"B\")\n    \n    print(student1.get_info())\n    print(student2.get_info())\n    print(f\"Total students: {Student.get_total_students()}\")\n</code></pre>\n\n<h4>Module with Configuration:</h4>\n<pre><code># File: config.py\n\"\"\"Application configuration.\"\"\"\n\n# Database settings\nDATABASE = {\n    'host': 'localhost',\n    'port': 3306,\n    'username': 'admin',\n    'password': 'secret',\n    'database': 'myapp'\n}\n\n# Application settings\nDEBUG = True\nMAX_CONNECTIONS = 100\nTIMEOUT = 30\n\n# API keys\nAPI_KEY = \"your-api-key-here\"\nAPI_SECRET = \"your-api-secret-here\"\n\ndef get_database_url():\n    \"\"\"Generate database connection URL.\"\"\"\n    return f\"mysql://{DATABASE['username']}:{DATABASE['password']}@{DATABASE['host']}:{DATABASE['port']}/{DATABASE['database']}\"\n\n# In another file:\n# import config\n# print(config.DEBUG)  # True\n# print(config.get_database_url())\n</code></pre>\n\n<h4>Practical Example - Math Utilities:</h4>\n<pre><code># File: math_utils.py\n\"\"\"Custom math utility functions.\"\"\"\n\nimport math\n\n__all__ = ['factorial', 'is_prime', 'fibonacci', 'gcd']\n\ndef factorial(n):\n    \"\"\"Calculate factorial of n.\"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial not defined for negative numbers\")\n    if n == 0 or n == 1:\n        return 1\n    return n * factorial(n - 1)\n\ndef is_prime(n):\n    \"\"\"Check if number is prime.\"\"\"\n    if n < 2:\n        return False\n    for i in range(2, int(math.sqrt(n)) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndef fibonacci(n):\n    \"\"\"Generate first n Fibonacci numbers.\"\"\"\n    if n <= 0:\n        return []\n    if n == 1:\n        return [0]\n    \n    fib = [0, 1]\n    for i in range(2, n):\n        fib.append(fib[i-1] + fib[i-2])\n    return fib\n\ndef gcd(a, b):\n    \"\"\"Calculate greatest common divisor.\"\"\"\n    while b:\n        a, b = b, a % b\n    return a\n\nif __name__ == \"__main__\":\n    # Test all functions\n    print(\"Testing math_utils module:\")\n    print(f\"5! = {factorial(5)}\")\n    print(f\"Is 17 prime? {is_prime(17)}\")\n    print(f\"First 10 Fibonacci: {fibonacci(10)}\")\n    print(f\"GCD(48, 18) = {gcd(48, 18)}\")\n</code></pre>\n\n<h4>Practical Example - Data Validator:</h4>\n<pre><code># File: validators.py\n\"\"\"Input validation functions.\"\"\"\n\nimport re\n\ndef is_valid_email(email):\n    \"\"\"Check if email is valid.\"\"\"\n    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$'\n    return bool(re.match(pattern, email))\n\ndef is_valid_phone(phone):\n    \"\"\"Check if phone number is valid (US format).\"\"\"\n    pattern = r'^\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}$'\n    return bool(re.match(pattern, phone))\n\ndef is_strong_password(password):\n    \"\"\"Check if password is strong.\n    \n    Requirements:\n    - At least 8 characters\n    - Contains uppercase and lowercase\n    - Contains number\n    - Contains special character\n    \"\"\"\n    if len(password) < 8:\n        return False\n    \n    has_upper = any(c.isupper() for c in password)\n    has_lower = any(c.islower() for c in password)\n    has_digit = any(c.isdigit() for c in password)\n    has_special = any(c in '!@#$%^&*()_+-=[]{}|;:,.<>?' for c in password)\n    \n    return all([has_upper, has_lower, has_digit, has_special])\n\ndef is_valid_age(age):\n    \"\"\"Check if age is valid (0-120).\"\"\"\n    try:\n        age_int = int(age)\n        return 0 <= age_int <= 120\n    except ValueError:\n        return False\n\nif __name__ == \"__main__\":\n    # Test validators\n    test_cases = [\n        (\"test@example.com\", is_valid_email),\n        (\"555-123-4567\", is_valid_phone),\n        (\"Pass123!\", is_strong_password),\n        (\"25\", is_valid_age)\n    ]\n    \n    for value, validator in test_cases:\n        result = validator(value)\n        print(f\"{validator.__name__}('{value}') = {result}\")\n</code></pre>\n\n<h4>Module Structure Best Practices:</h4>\n<pre><code># File: my_module.py\n\"\"\"Module docstring at the top.\"\"\"\n\n# 1. Imports (standard library, then third-party, then local)\nimport os\nimport sys\nfrom datetime import datetime\n\n# 2. Constants (UPPERCASE names)\nMAX_SIZE = 100\nDEFAULT_TIMEOUT = 30\n\n# 3. Module-level variables\n_cache = {}  # Private (starts with _)\n\n# 4. Classes\nclass MyClass:\n    pass\n\n# 5. Functions\ndef public_function():\n    \"\"\"Public function.\"\"\"\n    pass\n\ndef _private_function():\n    \"\"\"Private function (convention).\"\"\"\n    pass\n\n# 6. Main execution block (if any)\nif __name__ == \"__main__\":\n    # Test code here\n    pass\n</code></pre>\n\n<h4>Import Your Own Modules:</h4>\n<pre><code># Project structure:\n# my_project/\n#     main.py\n#     calculator.py\n#     utils.py\n\n# File: main.py\nimport calculator\nimport utils\n\nresult = calculator.add(5, 3)\nprint(utils.greet(\"Alice\"))\n\n# Alternative:\nfrom calculator import add, subtract\nfrom utils import greet\n\nresult = add(5, 3)\nprint(greet(\"Bob\"))\n</code></pre>\n        ",
  "starter_code": "# TODO: Create a module in your mind (don't create actual file, just write the code):\n# Module name: string_tools.py\n# \n# Functions to include:\n# 1. count_vowels(text) - Count number of vowels (a, e, i, o, u)\n# 2. remove_spaces(text) - Remove all spaces from text\n# 3. is_palindrome(text) - Check if text is same forwards and backwards (ignore case/spaces)\n# \n# Add:\n# - Module docstring\n# - Function docstrings\n# - __name__ == \"__main__\" test block\n# - __all__ list with all three functions\n#\n# Test in main block:\n# print(count_vowels(\"hello world\"))  # 3\n# print(remove_spaces(\"hello world\"))  # \"helloworld\"\n# print(is_palindrome(\"A man a plan a canal Panama\"))  # True\n\n",
  "solution_code": "\"\"\"String manipulation utilities.\"\"\"\n\n__all__ = ['count_vowels', 'remove_spaces', 'is_palindrome']\n\ndef count_vowels(text):\n    \"\"\"Count number of vowels in text.\"\"\"\n    vowels = 'aeiouAEIOU'\n    return sum(1 for char in text if char in vowels)\n\ndef remove_spaces(text):\n    \"\"\"Remove all spaces from text.\"\"\"\n    return text.replace(' ', '')\n\ndef is_palindrome(text):\n    \"\"\"Check if text is a palindrome (ignoring case and spaces).\"\"\"\n    cleaned = remove_spaces(text).lower()\n    return cleaned == cleaned[::-1]\n\nif __name__ == \"__main__\":\n    print(count_vowels(\"hello world\"))  # 3\n    print(remove_spaces(\"hello world\"))  # helloworld\n    print(is_palindrome(\"A man a plan a canal Panama\"))  # True",
  "learning_objectives": [
    "Create reusable Python modules from .py files",
    "Use __name__ == '__main__' pattern for testing",
    "Write module and function docstrings",
    "Control exports with __all__ variable"
  ],
  "key_concepts": [
    "Module Creation",
    "__name__ Variable",
    "if __name__ == '__main__'",
    "Module Docstrings",
    "__all__ Variable",
    "Public vs Private Functions (_prefix)",
    "Module Organization"
  ],
  "test_cases": [
    {
      "name": "Test: String tools module",
      "input": "",
      "expected_output": "3\nhelloworld\nTrue"
    }
  ],
  "hints": [
    "Module docstring: Triple quotes at top of file",
    "__all__ = ['function1', 'function2', 'function3']",
    "count_vowels: sum(1 for char in text if char in 'aeiouAEIOU')",
    "remove_spaces: text.replace(' ', '')",
    "is_palindrome: cleaned.lower() == cleaned.lower()[::-1]",
    "Test block: if __name__ == '__main__': ..."
  ],
  "visual_content": {
    "diagram": {
      "type": "module_structure",
      "title": "Python Module Structure",
      "template": {
        "sections": [
          {"order": 1, "name": "Module Docstring", "example": "\\\"\\\"\\\"Module description\\\"\\\"\\\""},
          {"order": 2, "name": "Imports", "example": "import os\\nfrom datetime import datetime"},
          {"order": 3, "name": "Constants", "example": "MAX_SIZE = 100"},
          {"order": 4, "name": "__all__ (optional)", "example": "__all__ = ['func1', 'func2']"},
          {"order": 5, "name": "Classes", "example": "class MyClass:\\n    pass"},
          {"order": 6, "name": "Functions", "example": "def my_function():\\n    pass"},
          {"order": 7, "name": "Main Block", "example": "if __name__ == '__main__':\\n    # Test code"}
        ]
      },
      "name_main_pattern": {
        "explanation": "__name__ is '__main__' when file is run directly, but equals module name when imported",
        "use_case": "Testing module functions without affecting imports",
        "example": "if __name__ == '__main__':\\n    # This code runs only when: python module.py\\n    # But NOT when: import module"
      }
    }
  }
}