{
  "module_id": 6,
  "title": "Packages & Project Organization",
  "order": 3,
  "reading_content": "\n<h3>Python Packages</h3>\n<p>A package is a directory containing Python modules and a special __init__.py file. Packages help organize large projects into logical hierarchies.</p>\n\n<h4>Basic Package Structure:</h4>\n<pre><code># Project structure:\nmy_package/\n    __init__.py          # Makes directory a package\n    module1.py\n    module2.py\n    subpackage/\n        __init__.py      # Subpackage\n        module3.py\n\n# File: my_package/__init__.py\n\"\"\"My package for doing cool things.\"\"\"\n\n__version__ = \"1.0.0\"\n\n# Import key functions/classes for easy access\nfrom .module1 import important_function\nfrom .module2 import ImportantClass\n\n# Now users can do:\n# from my_package import important_function, ImportantClass\n# Instead of:\n# from my_package.module1 import important_function\n</code></pre>\n\n<h4>The __init__.py File:</h4>\n<pre><code># File: geometry/__init__.py\n\"\"\"Geometry calculation package.\"\"\"\n\n# Package metadata\n__version__ = \"1.0.0\"\n__author__ = \"Your Name\"\n\n# Import from submodules for convenience\nfrom .shapes import Circle, Rectangle, Triangle\nfrom .calculations import area, perimeter\n\n# Define what 'from geometry import *' imports\n__all__ = ['Circle', 'Rectangle', 'Triangle', 'area', 'perimeter']\n\n# Package initialization code (runs when package is imported)\nprint(f\"Geometry package v{__version__} loaded\")\n\n# Now users can do:\n# from geometry import Circle\n# Instead of:\n# from geometry.shapes import Circle\n</code></pre>\n\n<h4>Importing from Packages:</h4>\n<pre><code># Project structure:\nmath_tools/\n    __init__.py\n    basic.py\n    advanced.py\n    stats/\n        __init__.py\n        descriptive.py\n        inferential.py\n\n# Style 1: Import package\nimport math_tools\nimport math_tools.stats\n\n# Style 2: Import module from package\nfrom math_tools import basic\nfrom math_tools.stats import descriptive\n\n# Style 3: Import specific items\nfrom math_tools.basic import add, subtract\nfrom math_tools.stats.descriptive import mean, median\n\n# Style 4: Import with alias\nimport math_tools.stats as stats\nresult = stats.descriptive.mean([1, 2, 3])\n</code></pre>\n\n<h4>Relative Imports (Within Package):</h4>\n<pre><code># Project structure:\nmy_app/\n    __init__.py\n    models/\n        __init__.py\n        user.py\n        product.py\n    utils/\n        __init__.py\n        validators.py\n        helpers.py\n\n# File: my_app/models/user.py\n\"\"\"User model.\"\"\"\n\n# Absolute import (from project root)\nfrom my_app.utils.validators import is_valid_email\n\n# Relative imports (. = current directory, .. = parent directory)\nfrom ..utils.validators import is_valid_email  # Go up one level\nfrom ..utils import validators                 # Import module\nfrom . import product                          # Import sibling module\n\nclass User:\n    def __init__(self, email):\n        if not is_valid_email(email):\n            raise ValueError(\"Invalid email\")\n        self.email = email\n</code></pre>\n\n<h4>Practical Package Example - Web Framework:</h4>\n<pre><code># Project structure:\nweb_framework/\n    __init__.py\n    core/\n        __init__.py\n        request.py\n        response.py\n        router.py\n    db/\n        __init__.py\n        connection.py\n        models.py\n    utils/\n        __init__.py\n        validators.py\n        helpers.py\n\n# File: web_framework/__init__.py\n\"\"\"A simple web framework.\"\"\"\n\n__version__ = \"1.0.0\"\n\nfrom .core.router import Router\nfrom .core.request import Request\nfrom .core.response import Response\nfrom .db.models import Model\n\n__all__ = ['Router', 'Request', 'Response', 'Model']\n\n# File: web_framework/core/request.py\nclass Request:\n    \"\"\"HTTP Request handler.\"\"\"\n    \n    def __init__(self, method, path, headers):\n        self.method = method\n        self.path = path\n        self.headers = headers\n    \n    def get_header(self, name):\n        return self.headers.get(name)\n\n# File: web_framework/core/response.py\nclass Response:\n    \"\"\"HTTP Response handler.\"\"\"\n    \n    def __init__(self, body, status=200):\n        self.body = body\n        self.status = status\n        self.headers = {}\n    \n    def set_header(self, name, value):\n        self.headers[name] = value\n\n# File: web_framework/core/router.py\nclass Router:\n    \"\"\"URL Router.\"\"\"\n    \n    def __init__(self):\n        self.routes = {}\n    \n    def add_route(self, path, handler):\n        self.routes[path] = handler\n    \n    def handle(self, request):\n        handler = self.routes.get(request.path)\n        if handler:\n            return handler(request)\n        return Response(\"Not Found\", 404)\n\n# Usage:\n# from web_framework import Router, Request, Response\n# \n# router = Router()\n# router.add_route('/home', home_handler)\n</code></pre>\n\n<h4>Namespace Packages (Python 3.3+):</h4>\n<pre><code># Namespace packages don't need __init__.py\n# Useful for splitting large packages across multiple directories\n\n# Directory structure:\nproject1/\n    my_namespace/\n        module1.py\n\nproject2/\n    my_namespace/\n        module2.py\n\n# Both can be imported as:\n# from my_namespace import module1\n# from my_namespace import module2\n\n# Note: This is advanced and rarely needed for beginners\n</code></pre>\n\n<h4>Complete Project Structure Example:</h4>\n<pre><code># E-commerce application structure:\necommerce/\n    __init__.py\n    \n    # Core functionality\n    core/\n        __init__.py\n        config.py          # Configuration\n        exceptions.py      # Custom exceptions\n    \n    # Models (data structures)\n    models/\n        __init__.py\n        user.py\n        product.py\n        order.py\n    \n    # Database operations\n    db/\n        __init__.py\n        connection.py\n        queries.py\n    \n    # Business logic\n    services/\n        __init__.py\n        auth.py           # Authentication\n        cart.py           # Shopping cart\n        payment.py        # Payment processing\n    \n    # Utilities\n    utils/\n        __init__.py\n        validators.py     # Input validation\n        formatters.py     # Data formatting\n        email.py          # Email sending\n    \n    # API endpoints\n    api/\n        __init__.py\n        routes.py\n        handlers.py\n\n# File: ecommerce/__init__.py\n\"\"\"E-commerce application package.\"\"\"\n\n__version__ = \"2.0.0\"\n\nfrom .models import User, Product, Order\nfrom .services.cart import ShoppingCart\nfrom .services.payment import process_payment\n\n__all__ = ['User', 'Product', 'Order', 'ShoppingCart', 'process_payment']\n</code></pre>\n\n<h4>Example: models/user.py</h4>\n<pre><code># File: ecommerce/models/user.py\n\"\"\"User model.\"\"\"\n\nfrom ..utils.validators import is_valid_email\nfrom ..core.exceptions import InvalidEmailError\n\nclass User:\n    \"\"\"Represents a user in the system.\"\"\"\n    \n    def __init__(self, username, email, password):\n        if not is_valid_email(email):\n            raise InvalidEmailError(f\"Invalid email: {email}\")\n        \n        self.username = username\n        self.email = email\n        self._password = password  # Private\n        self.orders = []\n    \n    def add_order(self, order):\n        \"\"\"Add an order to user's order history.\"\"\"\n        self.orders.append(order)\n    \n    def get_order_count(self):\n        \"\"\"Get total number of orders.\"\"\"\n        return len(self.orders)\n</code></pre>\n\n<h4>Example: services/cart.py</h4>\n<pre><code># File: ecommerce/services/cart.py\n\"\"\"Shopping cart service.\"\"\"\n\nfrom ..models.product import Product\nfrom ..utils.formatters import format_price\n\nclass ShoppingCart:\n    \"\"\"Shopping cart for holding products.\"\"\"\n    \n    def __init__(self):\n        self.items = []  # List of (product, quantity) tuples\n    \n    def add_item(self, product, quantity=1):\n        \"\"\"Add product to cart.\"\"\"\n        for item in self.items:\n            if item[0] == product:\n                # Product already in cart, update quantity\n                item[1] += quantity\n                return\n        # New product\n        self.items.append([product, quantity])\n    \n    def remove_item(self, product):\n        \"\"\"Remove product from cart.\"\"\"\n        self.items = [item for item in self.items if item[0] != product]\n    \n    def get_total(self):\n        \"\"\"Calculate total price.\"\"\"\n        total = sum(product.price * quantity for product, quantity in self.items)\n        return format_price(total)\n    \n    def clear(self):\n        \"\"\"Empty the cart.\"\"\"\n        self.items = []\n</code></pre>\n\n<h4>Best Practices for Package Organization:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Practice</th>\n        <th>Benefit</th>\n    </tr>\n    <tr>\n        <td><strong>Logical grouping</strong></td>\n        <td>Group related modules together (models/, utils/, services/)</td>\n    </tr>\n    <tr>\n        <td><strong>Shallow hierarchy</strong></td>\n        <td>Avoid too many nested levels (2-3 levels max)</td>\n    </tr>\n    <tr>\n        <td><strong>Clear __init__.py</strong></td>\n        <td>Import key items for easy access from package</td>\n    </tr>\n    <tr>\n        <td><strong>Relative imports</strong></td>\n        <td>Use within package for flexibility</td>\n    </tr>\n    <tr>\n        <td><strong>Descriptive names</strong></td>\n        <td>models/, services/, utils/ clearly show purpose</td>\n    </tr>\n</table>\n\n<h4>Common Package Patterns:</h4>\n<pre><code># Pattern 1: Flat package\nmy_package/\n    __init__.py\n    module1.py\n    module2.py\n    module3.py\n\n# Pattern 2: Layered package (MVC-style)\nmy_app/\n    __init__.py\n    models/      # Data structures\n    views/       # User interface\n    controllers/ # Business logic\n\n# Pattern 3: Feature-based package\nmy_app/\n    __init__.py\n    auth/        # Authentication feature\n    blog/        # Blog feature\n    shop/        # Shop feature\n\n# Pattern 4: Library package\nmy_lib/\n    __init__.py\n    core/        # Core functionality\n    utils/       # Utilities\n    contrib/     # Optional add-ons\n</code></pre>\n\n<h4>Importing Tips:</h4>\n<pre><code># ✅ Good: Absolute imports (clear and explicit)\nfrom my_package.models.user import User\nfrom my_package.utils.validators import is_valid_email\n\n# ✅ Good: Relative imports within package\nfrom ..models.user import User\nfrom .validators import is_valid_email\n\n# ❌ Bad: Wildcard imports\nfrom my_package.models import *  # Unclear what's imported\n\n# ✅ Good: Import specific items\nfrom my_package.models import User, Product, Order\n\n# ✅ Good: Group related imports\nimport os\nimport sys\nfrom datetime import datetime  # Standard library\n\nfrom flask import Flask        # Third-party\n\nfrom .models import User       # Local package\n</code></pre>\n        ",
  "starter_code": "# TODO: Design a package structure (on paper/in your mind) for a school management system:\n# \n# Create the following structure:\n# school/\n#     __init__.py\n#     models/\n#         __init__.py\n#         student.py\n#         teacher.py\n#         course.py\n#     services/\n#         __init__.py\n#         enrollment.py\n#         grading.py\n#     utils/\n#         __init__.py\n#         validators.py\n# \n# Write the school/__init__.py file that:\n# 1. Imports Student, Teacher, Course from models\n# 2. Imports enroll_student from services.enrollment\n# 3. Sets __version__ = \"1.0.0\"\n# 4. Defines __all__ with all imported items\n# \n# Then show how a user would import and use: from school import Student\n\n",
  "solution_code": "# File: school/__init__.py\n\"\"\"School management system package.\"\"\"\n\n__version__ = \"1.0.0\"\n\nfrom .models.student import Student\nfrom .models.teacher import Teacher\nfrom .models.course import Course\nfrom .services.enrollment import enroll_student\n\n__all__ = ['Student', 'Teacher', 'Course', 'enroll_student']\n\n# Usage:\n# from school import Student\n# student = Student(\"Alice\", \"alice@school.com\")",
  "learning_objectives": [
    "Understand package structure with __init__.py",
    "Organize large projects into logical packages",
    "Use relative and absolute imports appropriately",
    "Design clean package APIs with __init__.py"
  ],
  "key_concepts": [
    "Packages",
    "__init__.py",
    "Package Hierarchy",
    "Relative Imports (. and ..)",
    "Absolute Imports",
    "Namespace Packages",
    "Project Organization Patterns"
  ],
  "test_cases": [
    {
      "name": "Test: Package initialization",
      "input": "",
      "expected_output": "Package with imports, __version__, and __all__"
    }
  ],
  "hints": [
    "Package __init__.py makes directory importable",
    "Import from submodules: from .models.student import Student",
    "Set metadata: __version__ = '1.0.0'",
    "Control exports: __all__ = ['Student', 'Teacher', ...]",
    "Relative import . (current dir), .. (parent dir)"
  ],
  "visual_content": {
    "diagram": {
      "type": "package_structure",
      "title": "Package Organization Example",
      "example": {
        "structure": "my_package/\\n    __init__.py (Package entry point)\\n    models/ (Data structures)\\n        __init__.py\\n        user.py\\n        product.py\\n    services/ (Business logic)\\n        __init__.py\\n        auth.py\\n        cart.py\\n    utils/ (Utilities)\\n        __init__.py\\n        validators.py",
        "init_file": "__init__.py purpose:\\n1. Makes directory a package\\n2. Initializes package\\n3. Exposes public API\\n4. Imports key items\\n5. Sets metadata (__version__)"
      },
      "import_types": {
        "absolute": "from my_package.models.user import User",
        "relative_current": "from .user import User  # Same directory",
        "relative_parent": "from ..models.user import User  # Parent directory",
        "package_import": "from my_package import User  # Via __init__.py"
      }
    }
  }
}