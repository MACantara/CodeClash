{
  "module_id": 5,
  "title": "Classes & Objects - Introduction to OOP",
  "order": 1,
  "reading_content": "\n<h3>Introduction to Object-Oriented Programming</h3>\n<p>OOP is a programming paradigm that organizes code around objects - instances of classes that bundle data (attributes) and behavior (methods).</p>\n\n<h4>Why OOP?</h4>\n<pre><code># Without OOP - Procedural approach\nuser1_name = \"Alice\"\nuser1_age = 25\nuser1_email = \"alice@example.com\"\n\nuser2_name = \"Bob\"\nuser2_age = 30\nuser2_email = \"bob@example.com\"\n\ndef print_user(name, age, email):\n    print(f\"{name}, {age}, {email}\")\n\nprint_user(user1_name, user1_age, user1_email)\nprint_user(user2_name, user2_age, user2_email)\n\n# With OOP - Much cleaner!\nclass User:\n    def __init__(self, name, age, email):\n        self.name = name\n        self.age = age\n        self.email = email\n    \n    def display(self):\n        print(f\"{self.name}, {self.age}, {self.email}\")\n\nuser1 = User(\"Alice\", 25, \"alice@example.com\")\nuser2 = User(\"Bob\", 30, \"bob@example.com\")\n\nuser1.display()\nuser2.display()\n</code></pre>\n\n<h4>Defining a Class:</h4>\n<pre><code># Basic class definition\nclass Dog:\n    pass  # Empty class\n\n# Create an instance (object)\nmy_dog = Dog()\nprint(type(my_dog))  # <class '__main__.Dog'>\n\n# Class with attributes\nclass Cat:\n    species = \"Felis catus\"  # Class attribute (shared by all instances)\n\ncat1 = Cat()\ncat2 = Cat()\nprint(cat1.species)  # Felis catus\nprint(cat2.species)  # Felis catus (same for all)\n</code></pre>\n\n<h4>The __init__ Method (Constructor):</h4>\n<pre><code># __init__ is called when creating an instance\nclass Person:\n    def __init__(self, name, age):\n        \"\"\"Initialize a Person with name and age.\"\"\"\n        self.name = name  # Instance attribute\n        self.age = age    # Instance attribute\n\n# Create instances\nalice = Person(\"Alice\", 25)\nbob = Person(\"Bob\", 30)\n\n# Access attributes\nprint(alice.name)  # Alice\nprint(bob.name)    # Bob\nprint(alice.age)   # 25\nprint(bob.age)     # 30\n\n# Each instance has its own attributes\nalice.name = \"Alicia\"\nprint(alice.name)  # Alicia\nprint(bob.name)    # Bob (unchanged)\n</code></pre>\n\n<h4>Understanding 'self':</h4>\n<pre><code># 'self' refers to the current instance\nclass Counter:\n    def __init__(self):\n        self.count = 0  # Instance attribute\n    \n    def increment(self):\n        self.count += 1  # Access instance's count\n    \n    def get_count(self):\n        return self.count  # Return instance's count\n\ncounter1 = Counter()\ncounter2 = Counter()\n\ncounter1.increment()\ncounter1.increment()\ncounter2.increment()\n\nprint(counter1.get_count())  # 2\nprint(counter2.get_count())  # 1 (separate instance!)\n</code></pre>\n\n<h4>Instance Methods:</h4>\n<pre><code>class BankAccount:\n    def __init__(self, owner, balance=0):\n        self.owner = owner\n        self.balance = balance\n    \n    def deposit(self, amount):\n        \"\"\"Add money to the account.\"\"\"\n        if amount > 0:\n            self.balance += amount\n            return f\"Deposited ${amount}. New balance: ${self.balance}\"\n        return \"Invalid amount\"\n    \n    def withdraw(self, amount):\n        \"\"\"Remove money from the account.\"\"\"\n        if amount > self.balance:\n            return \"Insufficient funds\"\n        self.balance -= amount\n        return f\"Withdrew ${amount}. New balance: ${self.balance}\"\n    \n    def get_balance(self):\n        \"\"\"Return current balance.\"\"\"\n        return self.balance\n\n# Create account\naccount = BankAccount(\"Alice\", 1000)\nprint(account.deposit(500))   # Deposited $500. New balance: $1500\nprint(account.withdraw(200))  # Withdrew $200. New balance: $1300\nprint(account.get_balance())  # 1300\n</code></pre>\n\n<h4>Class vs Instance Attributes:</h4>\n<pre><code>class Circle:\n    pi = 3.14159  # Class attribute (shared by all circles)\n    \n    def __init__(self, radius):\n        self.radius = radius  # Instance attribute (unique to each circle)\n    \n    def area(self):\n        return Circle.pi * self.radius ** 2  # Access class attribute\n\ncircle1 = Circle(5)\ncircle2 = Circle(10)\n\nprint(circle1.area())  # 78.53975\nprint(circle2.area())  # 314.159\n\n# Change class attribute affects all instances\nCircle.pi = 3.14\nprint(circle1.area())  # 78.5 (changed!)\nprint(circle2.area())  # 314.0 (changed!)\n\n# Change instance attribute affects only that instance\ncircle1.radius = 3\nprint(circle1.area())  # 28.26\nprint(circle2.area())  # 314.0 (unchanged)\n</code></pre>\n\n<h4>The __str__ Method:</h4>\n<pre><code># __str__ defines how objects are printed\nclass Person:\n    def __init__(self, name, age):\n        self.name = name\n        self.age = age\n    \n    def __str__(self):\n        return f\"Person(name={self.name}, age={self.age})\"\n\nalice = Person(\"Alice\", 25)\nprint(alice)  # Person(name=Alice, age=25)\n\n# Without __str__\nclass Dog:\n    def __init__(self, name):\n        self.name = name\n\ndog = Dog(\"Buddy\")\nprint(dog)  # <__main__.Dog object at 0x...> (not very useful)\n</code></pre>\n\n<h4>Practical Example - Student Class:</h4>\n<pre><code>class Student:\n    \"\"\"Represent a student with grades.\"\"\"\n    \n    def __init__(self, name, student_id):\n        self.name = name\n        self.student_id = student_id\n        self.grades = []  # Empty list for grades\n    \n    def add_grade(self, grade):\n        \"\"\"Add a grade to the student's record.\"\"\"\n        if 0 <= grade <= 100:\n            self.grades.append(grade)\n            return f\"Added grade {grade}\"\n        return \"Invalid grade (must be 0-100)\"\n    \n    def get_average(self):\n        \"\"\"Calculate average grade.\"\"\"\n        if not self.grades:\n            return 0\n        return sum(self.grades) / len(self.grades)\n    \n    def get_letter_grade(self):\n        \"\"\"Get letter grade based on average.\"\"\"\n        avg = self.get_average()\n        if avg >= 90:\n            return 'A'\n        elif avg >= 80:\n            return 'B'\n        elif avg >= 70:\n            return 'C'\n        elif avg >= 60:\n            return 'D'\n        else:\n            return 'F'\n    \n    def __str__(self):\n        return f\"Student({self.name}, ID: {self.student_id}, Avg: {self.get_average():.1f})\"\n\n# Usage\nalice = Student(\"Alice\", \"S12345\")\nalice.add_grade(85)\nalice.add_grade(92)\nalice.add_grade(78)\n\nprint(alice)  # Student(Alice, ID: S12345, Avg: 85.0)\nprint(f\"Average: {alice.get_average():.1f}\")  # Average: 85.0\nprint(f\"Letter Grade: {alice.get_letter_grade()}\")  # Letter Grade: B\n</code></pre>\n\n<h4>Multiple Instances:</h4>\n<pre><code># Each instance is independent\nclass Car:\n    def __init__(self, brand, model, year):\n        self.brand = brand\n        self.model = model\n        self.year = year\n        self.mileage = 0\n    \n    def drive(self, miles):\n        self.mileage += miles\n        return f\"Drove {miles} miles. Total: {self.mileage}\"\n    \n    def __str__(self):\n        return f\"{self.year} {self.brand} {self.model} ({self.mileage} miles)\"\n\n# Create multiple cars\ncar1 = Car(\"Toyota\", \"Camry\", 2020)\ncar2 = Car(\"Honda\", \"Civic\", 2021)\n\ncar1.drive(100)\ncar1.drive(50)\ncar2.drive(200)\n\nprint(car1)  # 2020 Toyota Camry (150 miles)\nprint(car2)  # 2021 Honda Civic (200 miles)\n</code></pre>\n\n<h4>Benefits of OOP:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Benefit</th>\n        <th>Description</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td><strong>Encapsulation</strong></td>\n        <td>Bundle data and methods together</td>\n        <td>BankAccount bundles balance and deposit/withdraw</td>\n    </tr>\n    <tr>\n        <td><strong>Reusability</strong></td>\n        <td>Create multiple instances from one class</td>\n        <td>Create many User objects from User class</td>\n    </tr>\n    <tr>\n        <td><strong>Organization</strong></td>\n        <td>Group related functionality</td>\n        <td>All student operations in Student class</td>\n    </tr>\n    <tr>\n        <td><strong>Maintainability</strong></td>\n        <td>Changes in one place affect all instances</td>\n        <td>Update User class, all users benefit</td>\n    </tr>\n</table>\n        ",
  "starter_code": "# TODO: Create a 'Rectangle' class with:\n# 1. __init__ that takes width and height\n# 2. area() method that returns width * height\n# 3. perimeter() method that returns 2 * (width + height)\n# 4. __str__ method that returns \"Rectangle(width=X, height=Y)\"\n#\n# Test:\n# rect = Rectangle(5, 3)\n# print(rect.area())      # 15\n# print(rect.perimeter()) # 16\n# print(rect)             # Rectangle(width=5, height=3)\n\n",
  "solution_code": "class Rectangle:\n    def __init__(self, width, height):\n        self.width = width\n        self.height = height\n    \n    def area(self):\n        return self.width * self.height\n    \n    def perimeter(self):\n        return 2 * (self.width + self.height)\n    \n    def __str__(self):\n        return f\"Rectangle(width={self.width}, height={self.height})\"\n\nrect = Rectangle(5, 3)\nprint(rect.area())\nprint(rect.perimeter())\nprint(rect)",
  "learning_objectives": [
    "Define classes with attributes and methods",
    "Create instances (objects) from classes",
    "Understand the __init__ constructor and self parameter",
    "Implement instance methods to define object behavior"
  ],
  "key_concepts": [
    "Classes",
    "Objects",
    "Instances",
    "__init__ Constructor",
    "self Parameter",
    "Instance Attributes",
    "Instance Methods",
    "__str__ Method"
  ],
  "test_cases": [
    {
      "name": "Test: Rectangle class",
      "input": "",
      "expected_output": "15\n16\nRectangle(width=5, height=3)"
    }
  ],
  "hints": [
    "Define class: class Rectangle:",
    "Constructor: def __init__(self, width, height):",
    "Store attributes: self.width = width, self.height = height",
    "Area method: return self.width * self.height",
    "Perimeter: return 2 * (self.width + self.height)",
    "__str__: return f\"Rectangle(width={self.width}, height={self.height})\""
  ],
  "visual_content": {
    "diagram": {
      "type": "class_anatomy",
      "title": "Class Structure",
      "example": "class Person:\\n    def __init__(self, name, age):\\n        self.name = name\\n        self.age = age\\n    \\n    def greet(self):\\n        return f'Hello, {self.name}'",
      "parts": [
        {"part": "class Person:", "label": "Class definition"},
        {"part": "def __init__(self, name, age):", "label": "Constructor (runs when creating instance)"},
        {"part": "self.name = name", "label": "Instance attribute (unique to each object)"},
        {"part": "def greet(self):", "label": "Instance method (object behavior)"},
        {"part": "self", "label": "Reference to current instance"}
      ],
      "usage": "alice = Person('Alice', 25)\\nalice.greet()  # 'Hello, Alice'"
    }
  }
}
