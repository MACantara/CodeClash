{
  "module_id": 7,
  "title": "Built-in Functions & Functional Programming",
  "order": 3,
  "reading_content": "\n<h3>Powerful Built-in Functions</h3>\n<p>Python provides many built-in functions for functional programming, data transformation, and efficient iteration.</p>\n\n<h4>map() - Transform Every Element:</h4>\n<pre><code># map(function, iterable) applies function to each element\nnumbers = [1, 2, 3, 4, 5]\n\n# Square each number\nsquared = map(lambda x: x**2, numbers)\nprint(list(squared))  # [1, 4, 9, 16, 25]\n\n# Convert to strings\nstr_numbers = map(str, numbers)\nprint(list(str_numbers))  # ['1', '2', '3', '4', '5']\n\n# Multiple iterables\nnumbers1 = [1, 2, 3]\nnumbers2 = [10, 20, 30]\nsums = map(lambda x, y: x + y, numbers1, numbers2)\nprint(list(sums))  # [11, 22, 33]\n\n# Practical example\nnames = ['alice', 'bob', 'charlie']\ncapitalized = map(str.capitalize, names)\nprint(list(capitalized))  # ['Alice', 'Bob', 'Charlie']\n</code></pre>\n\n<h4>filter() - Select Elements:</h4>\n<pre><code># filter(function, iterable) keeps elements where function returns True\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Keep only even numbers\neven = filter(lambda x: x % 2 == 0, numbers)\nprint(list(even))  # [2, 4, 6, 8, 10]\n\n# Keep only positive numbers\nvalues = [-5, -2, 0, 3, 7, -1, 9]\npositive = filter(lambda x: x > 0, values)\nprint(list(positive))  # [3, 7, 9]\n\n# Practical example - filter valid emails\nemails = ['user@email.com', 'invalid', 'admin@site.org', 'bad-email']\nvalid_emails = filter(lambda e: '@' in e and '.' in e, emails)\nprint(list(valid_emails))  # ['user@email.com', 'admin@site.org']\n\n# filter with None removes falsy values\nvalues = [0, 1, False, 2, '', 3, None, 4]\ntruthy = filter(None, values)\nprint(list(truthy))  # [1, 2, 3, 4]\n</code></pre>\n\n<h4>zip() - Combine Iterables:</h4>\n<pre><code># zip() combines multiple iterables element-by-element\nnames = ['Alice', 'Bob', 'Charlie']\nages = [25, 30, 35]\ncities = ['NYC', 'LA', 'Chicago']\n\ncombined = zip(names, ages, cities)\nprint(list(combined))  # [('Alice', 25, 'NYC'), ('Bob', 30, 'LA'), ('Charlie', 35, 'Chicago')]\n\n# Create dictionary from two lists\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 25, 'NYC']\nuser_dict = dict(zip(keys, values))\nprint(user_dict)  # {'name': 'Alice', 'age': 25, 'city': 'NYC'}\n\n# Iterate pairs\nfor name, age in zip(names, ages):\n    print(f\"{name} is {age} years old\")\n\n# Unzip (transpose)\npairs = [(1, 'a'), (2, 'b'), (3, 'c')]\nnums, letters = zip(*pairs)  # Unpack pairs\nprint(nums)     # (1, 2, 3)\nprint(letters)  # ('a', 'b', 'c')\n\n# zip stops at shortest iterable\nshort = zip([1, 2, 3], ['a', 'b'])\nprint(list(short))  # [(1, 'a'), (2, 'b')]\n</code></pre>\n\n<h4>enumerate() - Index and Value:</h4>\n<pre><code># enumerate(iterable, start=0) returns (index, value) pairs\nfruits = ['apple', 'banana', 'cherry']\n\nfor index, fruit in enumerate(fruits):\n    print(f\"{index}: {fruit}\")\n# 0: apple\n# 1: banana\n# 2: cherry\n\n# Start from different index\nfor index, fruit in enumerate(fruits, start=1):\n    print(f\"{index}. {fruit}\")\n# 1. apple\n# 2. banana\n# 3. cherry\n\n# Create index mapping\nfruit_indices = dict(enumerate(fruits))\nprint(fruit_indices)  # {0: 'apple', 1: 'banana', 2: 'cherry'}\n\n# Better than range(len())\n# ❌ Bad:\nfor i in range(len(fruits)):\n    print(f\"{i}: {fruits[i]}\")\n\n# ✅ Good:\nfor i, fruit in enumerate(fruits):\n    print(f\"{i}: {fruit}\")\n</code></pre>\n\n<h4>sorted() - Sort Iterables:</h4>\n<pre><code># sorted(iterable, key=None, reverse=False)\nnumbers = [5, 2, 8, 1, 9, 3]\nprint(sorted(numbers))  # [1, 2, 3, 5, 8, 9]\nprint(sorted(numbers, reverse=True))  # [9, 8, 5, 3, 2, 1]\n\n# Sort strings\nwords = ['banana', 'apple', 'cherry']\nprint(sorted(words))  # ['apple', 'banana', 'cherry']\n\n# Sort by length using key\nwords = ['python', 'is', 'awesome', 'to', 'learn']\nby_length = sorted(words, key=len)\nprint(by_length)  # ['is', 'to', 'learn', 'python', 'awesome']\n\n# Sort by custom function\nstudents = ['Alice', 'bob', 'Charlie', 'david']\nby_lower = sorted(students, key=str.lower)\nprint(by_lower)  # ['Alice', 'bob', 'Charlie', 'david']\n\n# Sort complex objects\nusers = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Charlie', 'age': 35}\n]\n\n# Sort by age\nby_age = sorted(users, key=lambda u: u['age'])\nfor user in by_age:\n    print(f\"{user['name']}: {user['age']}\")\n# Bob: 25\n# Alice: 30\n# Charlie: 35\n\n# Sort by name\nby_name = sorted(users, key=lambda u: u['name'])\nfor user in by_name:\n    print(f\"{user['name']}: {user['age']}\")\n</code></pre>\n\n<h4>min() and max() with key:</h4>\n<pre><code>numbers = [5, 2, 8, 1, 9]\nprint(min(numbers))  # 1\nprint(max(numbers))  # 9\n\n# Find longest/shortest string\nwords = ['python', 'is', 'awesome']\nprint(min(words, key=len))  # 'is'\nprint(max(words, key=len))  # 'awesome'\n\n# Find youngest/oldest person\npeople = [\n    {'name': 'Alice', 'age': 30},\n    {'name': 'Bob', 'age': 25},\n    {'name': 'Charlie', 'age': 35}\n]\n\nyoungest = min(people, key=lambda p: p['age'])\noldest = max(people, key=lambda p: p['age'])\n\nprint(f\"Youngest: {youngest['name']} ({youngest['age']})\")  # Bob (25)\nprint(f\"Oldest: {oldest['name']} ({oldest['age']})\")  # Charlie (35)\n</code></pre>\n\n<h4>any() and all():</h4>\n<pre><code># any() - True if ANY element is truthy\nprint(any([False, False, True, False]))  # True\nprint(any([False, False, False]))        # False\nprint(any([]))                           # False\n\n# all() - True if ALL elements are truthy\nprint(all([True, True, True]))           # True\nprint(all([True, False, True]))          # False\nprint(all([]))                           # True (empty is all True!)\n\n# Practical examples\nnumbers = [2, 4, 6, 8, 10]\nprint(all(n % 2 == 0 for n in numbers))  # True (all even)\nprint(any(n > 5 for n in numbers))       # True (some > 5)\n\n# Validate user input\nuser_data = {'name': 'Alice', 'age': 25, 'email': 'alice@email.com'}\nrequired_fields = ['name', 'age', 'email']\n\nhas_all_fields = all(field in user_data for field in required_fields)\nprint(has_all_fields)  # True\n\n# Check if any string is empty\nstrings = ['hello', '', 'world']\nhas_empty = any(s == '' for s in strings)\nprint(has_empty)  # True\n</code></pre>\n\n<h4>sum(), len(), abs(), round():</h4>\n<pre><code># sum() - Sum of all elements\nnumbers = [1, 2, 3, 4, 5]\nprint(sum(numbers))  # 15\nprint(sum(numbers, 10))  # 25 (start value 10)\n\n# len() - Number of elements\nprint(len(numbers))  # 5\nprint(len(\"hello\"))  # 5\n\n# abs() - Absolute value\nprint(abs(-5))       # 5\nprint(abs(-3.14))    # 3.14\n\n# round() - Round to n decimal places\nprint(round(3.14159))     # 3\nprint(round(3.14159, 2))  # 3.14\nprint(round(3.14159, 4))  # 3.1416\n</code></pre>\n\n<h4>Combining Functions - Data Pipeline:</h4>\n<pre><code># Process data using multiple functions\ntransactions = [\n    {'id': 1, 'amount': 100, 'type': 'income'},\n    {'id': 2, 'amount': -50, 'type': 'expense'},\n    {'id': 3, 'amount': 200, 'type': 'income'},\n    {'id': 4, 'amount': -30, 'type': 'expense'},\n    {'id': 5, 'amount': 150, 'type': 'income'}\n]\n\n# Filter income transactions\nincomes = filter(lambda t: t['type'] == 'income', transactions)\n\n# Extract amounts\namounts = map(lambda t: t['amount'], incomes)\n\n# Calculate total\ntotal_income = sum(amounts)\nprint(f\"Total income: ${total_income}\")  # Total income: $450\n\n# All in one line\ntotal_income = sum(\n    map(lambda t: t['amount'],\n        filter(lambda t: t['type'] == 'income', transactions)\n    )\n)\nprint(f\"Total income: ${total_income}\")  # Total income: $450\n\n# Or using list comprehension (more Pythonic)\ntotal_income = sum(t['amount'] for t in transactions if t['type'] == 'income')\nprint(f\"Total income: ${total_income}\")  # Total income: $450\n</code></pre>\n\n<h4>Practical Example - Data Analysis:</h4>\n<pre><code>students = [\n    {'name': 'Alice', 'scores': [85, 90, 88]},\n    {'name': 'Bob', 'scores': [70, 75, 72]},\n    {'name': 'Charlie', 'scores': [95, 92, 98]},\n    {'name': 'David', 'scores': [60, 65, 62]}\n]\n\n# Calculate average for each student\naverages = map(lambda s: {'name': s['name'], 'average': sum(s['scores']) / len(s['scores'])}, students)\n\n# Filter students with average >= 80\npassing = filter(lambda s: s['average'] >= 80, averages)\n\n# Sort by average (descending)\ntop_students = sorted(passing, key=lambda s: s['average'], reverse=True)\n\nfor student in top_students:\n    print(f\"{student['name']}: {student['average']:.2f}\")\n# Charlie: 95.00\n# Alice: 87.67\n</code></pre>\n\n<h4>Functional Programming Comparison:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Function</th>\n        <th>Purpose</th>\n        <th>Example</th>\n    </tr>\n    <tr>\n        <td><strong>map()</strong></td>\n        <td>Transform each element</td>\n        <td>map(lambda x: x*2, [1,2,3]) → [2,4,6]</td>\n    </tr>\n    <tr>\n        <td><strong>filter()</strong></td>\n        <td>Select elements</td>\n        <td>filter(lambda x: x>0, [-1,2,-3,4]) → [2,4]</td>\n    </tr>\n    <tr>\n        <td><strong>zip()</strong></td>\n        <td>Combine iterables</td>\n        <td>zip([1,2], ['a','b']) → [(1,'a'), (2,'b')]</td>\n    </tr>\n    <tr>\n        <td><strong>enumerate()</strong></td>\n        <td>Add indices</td>\n        <td>enumerate(['a','b']) → [(0,'a'), (1,'b')]</td>\n    </tr>\n    <tr>\n        <td><strong>sorted()</strong></td>\n        <td>Sort elements</td>\n        <td>sorted([3,1,2]) → [1,2,3]</td>\n    </tr>\n    <tr>\n        <td><strong>any()/all()</strong></td>\n        <td>Check conditions</td>\n        <td>any([False, True]) → True</td>\n    </tr>\n</table>\n        ",
  "starter_code": "# TODO: Process a list of products:\n# Given:\n# products = [\n#     {'name': 'Laptop', 'price': 1000, 'stock': 5},\n#     {'name': 'Mouse', 'price': 25, 'stock': 0},\n#     {'name': 'Keyboard', 'price': 75, 'stock': 10},\n#     {'name': 'Monitor', 'price': 300, 'stock': 3}\n# ]\n# \n# Tasks:\n# 1. Filter products that are in stock (stock > 0)\n# 2. Sort by price (descending)\n# 3. Extract just the names\n# 4. Return as a list\n# \n# Expected output: ['Laptop', 'Monitor', 'Keyboard']\n\n",
  "solution_code": "products = [\n    {'name': 'Laptop', 'price': 1000, 'stock': 5},\n    {'name': 'Mouse', 'price': 25, 'stock': 0},\n    {'name': 'Keyboard', 'price': 75, 'stock': 10},\n    {'name': 'Monitor', 'price': 300, 'stock': 3}\n]\n\n# 1. Filter in-stock products\nin_stock = filter(lambda p: p['stock'] > 0, products)\n\n# 2. Sort by price (descending)\nsorted_products = sorted(in_stock, key=lambda p: p['price'], reverse=True)\n\n# 3. Extract names\nnames = map(lambda p: p['name'], sorted_products)\n\n# 4. Convert to list\nresult = list(names)\nprint(result)  # ['Laptop', 'Monitor', 'Keyboard']",
  "learning_objectives": [
    "Use map() to transform data",
    "Use filter() to select elements",
    "Combine iterables with zip()",
    "Sort data with sorted() and custom keys"
  ],
  "key_concepts": [
    "map()",
    "filter()",
    "zip()",
    "enumerate()",
    "sorted()",
    "min()/max() with key",
    "any()/all()",
    "Functional Programming"
  ],
  "test_cases": [
    {
      "name": "Test: Product filtering and sorting",
      "input": "",
      "expected_output": "['Laptop', 'Monitor', 'Keyboard']"
    }
  ],
  "hints": [
    "Filter in stock: filter(lambda p: p['stock'] > 0, products)",
    "Sort by price: sorted(..., key=lambda p: p['price'], reverse=True)",
    "Extract names: map(lambda p: p['name'], ...)",
    "Convert to list: list(...)",
    "Chain operations: list(map(..., sorted(..., filter(...))))"
  ],
  "visual_content": {
    "diagram": {
      "type": "functional_programming",
      "title": "Functional Programming Functions",
      "functions": {
        "map": {
          "purpose": "Transform each element",
          "signature": "map(function, iterable)",
          "example": "[1, 2, 3] → map(lambda x: x*2, ...) → [2, 4, 6]"
        },
        "filter": {
          "purpose": "Select elements that match condition",
          "signature": "filter(function, iterable)",
          "example": "[-1, 2, -3, 4] → filter(lambda x: x>0, ...) → [2, 4]"
        },
        "zip": {
          "purpose": "Combine multiple iterables",
          "signature": "zip(*iterables)",
          "example": "[1,2], ['a','b'] → zip(..., ...) → [(1,'a'), (2,'b')]"
        },
        "sorted": {
          "purpose": "Sort elements",
          "signature": "sorted(iterable, key=None, reverse=False)",
          "example": "[3,1,2] → sorted(...) → [1,2,3]"
        }
      },
      "pipeline": "Data → filter() → map() → sorted() → Result"
    }
  }
}