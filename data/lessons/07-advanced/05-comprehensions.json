{
  "module_id": 7,
  "title": "List Comprehensions & Advanced Patterns",
  "order": 5,
  "reading_content": "\n<h3>List Comprehensions and Advanced Patterns</h3>\n<p>List comprehensions provide a concise way to create lists, and understanding advanced patterns makes your Python code more elegant and Pythonic.</p>\n\n<h4>Basic List Comprehension:</h4>\n<pre><code># Traditional way with for loop\nsquares = []\nfor x in range(10):\n    squares.append(x**2)\nprint(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# List comprehension (more Pythonic)\nsquares = [x**2 for x in range(10)]\nprint(squares)  # [0, 1, 4, 9, 16, 25, 36, 49, 64, 81]\n\n# General syntax: [expression for item in iterable]\nnumbers = [1, 2, 3, 4, 5]\ndoubled = [x * 2 for x in numbers]\nprint(doubled)  # [2, 4, 6, 8, 10]\n\n# With string operations\nwords = ['hello', 'world', 'python']\nupper = [word.upper() for word in words]\nprint(upper)  # ['HELLO', 'WORLD', 'PYTHON']\n</code></pre>\n\n<h4>List Comprehension with Condition:</h4>\n<pre><code># Filter with if condition\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# Only even numbers\neven = [x for x in numbers if x % 2 == 0]\nprint(even)  # [2, 4, 6, 8, 10]\n\n# Only numbers > 5\ngreater = [x for x in numbers if x > 5]\nprint(greater)  # [6, 7, 8, 9, 10]\n\n# Multiple conditions\nresult = [x for x in numbers if x % 2 == 0 if x > 5]\nprint(result)  # [6, 8, 10]\n\n# Practical example - filter valid emails\nemails = ['user@email.com', 'invalid', 'admin@site.org', 'bad']\nvalid = [email for email in emails if '@' in email and '.' in email]\nprint(valid)  # ['user@email.com', 'admin@site.org']\n</code></pre>\n\n<h4>List Comprehension with if-else:</h4>\n<pre><code># Syntax: [expr_if_true if condition else expr_if_false for item in iterable]\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\n\n# 'even' for even numbers, 'odd' for odd\nlabels = ['even' if x % 2 == 0 else 'odd' for x in numbers]\nprint(labels)  # ['odd', 'even', 'odd', 'even', ...]\n\n# Convert negative to 0, keep positive\nvalues = [-5, 3, -2, 8, -1, 6]\npositive = [x if x > 0 else 0 for x in values]\nprint(positive)  # [0, 3, 0, 8, 0, 6]\n\n# Practical example - grade converter\nscores = [85, 92, 78, 95, 88, 60]\ngrades = ['A' if s >= 90 else 'B' if s >= 80 else 'C' if s >= 70 else 'D' if s >= 60 else 'F' for s in scores]\nprint(grades)  # ['B', 'A', 'C', 'A', 'B', 'D']\n</code></pre>\n\n<h4>Nested List Comprehension:</h4>\n<pre><code># Flatten nested list\nnested = [[1, 2, 3], [4, 5], [6, 7, 8]]\nflattened = [num for sublist in nested for num in sublist]\nprint(flattened)  # [1, 2, 3, 4, 5, 6, 7, 8]\n\n# Create multiplication table\ntable = [[i * j for j in range(1, 6)] for i in range(1, 6)]\nfor row in table:\n    print(row)\n# [1, 2, 3, 4, 5]\n# [2, 4, 6, 8, 10]\n# [3, 6, 9, 12, 15]\n# [4, 8, 12, 16, 20]\n# [5, 10, 15, 20, 25]\n\n# Matrix transpose\nmatrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\ntransposed = [[row[i] for row in matrix] for i in range(len(matrix[0]))]\nfor row in transposed:\n    print(row)\n# [1, 4, 7]\n# [2, 5, 8]\n# [3, 6, 9]\n</code></pre>\n\n<h4>Dictionary Comprehension:</h4>\n<pre><code># Create dictionary with comprehension\n# Syntax: {key: value for item in iterable}\n\n# Square numbers\nsquares = {x: x**2 for x in range(1, 6)}\nprint(squares)  # {1: 1, 2: 4, 3: 9, 4: 16, 5: 25}\n\n# From two lists\nkeys = ['name', 'age', 'city']\nvalues = ['Alice', 25, 'NYC']\nuser = {k: v for k, v in zip(keys, values)}\nprint(user)  # {'name': 'Alice', 'age': 25, 'city': 'NYC'}\n\n# Filter dictionary\nscores = {'Alice': 85, 'Bob': 92, 'Charlie': 78, 'David': 95}\npassing = {name: score for name, score in scores.items() if score >= 80}\nprint(passing)  # {'Alice': 85, 'Bob': 92, 'David': 95}\n\n# Swap keys and values\noriginal = {'a': 1, 'b': 2, 'c': 3}\nswapped = {v: k for k, v in original.items()}\nprint(swapped)  # {1: 'a', 2: 'b', 3: 'c'}\n</code></pre>\n\n<h4>Set Comprehension:</h4>\n<pre><code># Create set with comprehension\n# Syntax: {expression for item in iterable}\n\n# Unique squares\nnumbers = [1, 2, 2, 3, 3, 3, 4, 4, 5]\nsquares = {x**2 for x in numbers}\nprint(squares)  # {1, 4, 9, 16, 25}\n\n# Unique word lengths\nwords = ['hello', 'world', 'hi', 'python', 'code']\nlengths = {len(word) for word in words}\nprint(lengths)  # {2, 4, 5, 6}\n\n# Unique first letters\nfirst_letters = {word[0].upper() for word in words}\nprint(first_letters)  # {'H', 'W', 'P', 'C'}\n</code></pre>\n\n<h4>Generator Expression (Reviewed):</h4>\n<pre><code># Like list comprehension but with parentheses (lazy evaluation)\nnumbers = [1, 2, 3, 4, 5]\n\n# List comprehension (creates entire list)\nsquares_list = [x**2 for x in numbers]\nprint(type(squares_list))  # <class 'list'>\n\n# Generator expression (creates generator)\nsquares_gen = (x**2 for x in numbers)\nprint(type(squares_gen))  # <class 'generator'>\n\n# Use in functions that accept iterables\nprint(sum(x**2 for x in range(10)))  # 285\nprint(max(x**2 for x in range(10)))  # 81\n</code></pre>\n\n<h4>Practical Example - Data Processing:</h4>\n<pre><code># Process student data\nstudents = [\n    {'name': 'Alice', 'scores': [85, 90, 88]},\n    {'name': 'Bob', 'scores': [70, 75, 72]},\n    {'name': 'Charlie', 'scores': [95, 92, 98]},\n    {'name': 'David', 'scores': [60, 65, 62]}\n]\n\n# Calculate averages\naverages = {s['name']: sum(s['scores']) / len(s['scores']) for s in students}\nprint(averages)\n# {'Alice': 87.67, 'Bob': 72.33, 'Charlie': 95.0, 'David': 62.33}\n\n# Get names of passing students (avg >= 70)\npassing = [s['name'] for s in students if sum(s['scores']) / len(s['scores']) >= 70]\nprint(passing)  # ['Alice', 'Bob', 'Charlie']\n\n# Get top scores from each student\ntop_scores = {s['name']: max(s['scores']) for s in students}\nprint(top_scores)\n# {'Alice': 90, 'Bob': 75, 'Charlie': 98, 'David': 65}\n</code></pre>\n\n<h4>Practical Example - Text Processing:</h4>\n<pre><code># Process text data\ntext = \"Hello World Python Programming\"\n\n# Word lengths\nword_lengths = {word: len(word) for word in text.split()}\nprint(word_lengths)\n# {'Hello': 5, 'World': 5, 'Python': 6, 'Programming': 11}\n\n# First letter of each word\nfirst_letters = [word[0] for word in text.split()]\nprint(first_letters)  # ['H', 'W', 'P', 'P']\n\n# Words longer than 5 characters\nlong_words = [word for word in text.split() if len(word) > 5]\nprint(long_words)  # ['Python', 'Programming']\n\n# Count vowels in each word\nvowels = 'aeiouAEIOU'\nvowel_counts = {word: sum(1 for char in word if char in vowels) for word in text.split()}\nprint(vowel_counts)\n# {'Hello': 2, 'World': 1, 'Python': 1, 'Programming': 3}\n</code></pre>\n\n<h4>Ternary Operator (Conditional Expression):</h4>\n<pre><code># Syntax: value_if_true if condition else value_if_false\n\n# Traditional if-else\nx = 10\nif x > 5:\n    result = \"greater\"\nelse:\n    result = \"less or equal\"\n\n# Ternary operator (one line)\nx = 10\nresult = \"greater\" if x > 5 else \"less or equal\"\nprint(result)  # greater\n\n# In function calls\nprint(\"even\" if 4 % 2 == 0 else \"odd\")  # even\n\n# Nested ternary\nage = 25\ncategory = \"child\" if age < 13 else \"teen\" if age < 20 else \"adult\"\nprint(category)  # adult\n\n# In list comprehension\nnumbers = [1, 2, 3, 4, 5]\nlabels = [\"even\" if n % 2 == 0 else \"odd\" for n in numbers]\nprint(labels)  # ['odd', 'even', 'odd', 'even', 'odd']\n</code></pre>\n\n<h4>Unpacking and Extended Unpacking:</h4>\n<pre><code># Basic unpacking\npoint = (3, 4)\nx, y = point\nprint(x, y)  # 3 4\n\n# Extended unpacking with *\nnumbers = [1, 2, 3, 4, 5]\nfirst, *middle, last = numbers\nprint(first)   # 1\nprint(middle)  # [2, 3, 4]\nprint(last)    # 5\n\n# Skip values with _\ndata = (1, 2, 3, 4, 5)\nfirst, _, _, _, last = data\nprint(first, last)  # 1 5\n\n# Swap variables (Pythonic)\na, b = 5, 10\na, b = b, a  # Swap\nprint(a, b)  # 10 5\n\n# Multiple assignment\nx = y = z = 0\nprint(x, y, z)  # 0 0 0\n</code></pre>\n\n<h4>Walrus Operator := (Python 3.8+):</h4>\n<pre><code># Assign and use in same expression\n\n# Traditional way\ndata = input(\"Enter text: \")\nif len(data) > 5:\n    print(f\"Long input: {data}\")\n\n# With walrus operator\nif (data := input(\"Enter text: \")) and len(data) > 5:\n    print(f\"Long input: {data}\")\n\n# In while loop\nwhile (line := input(\"Enter line (or 'quit'): \")) != 'quit':\n    print(f\"You entered: {line}\")\n\n# In list comprehension\nnumbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]\nresult = [y for x in numbers if (y := x**2) > 20]\nprint(result)  # [25, 36, 49, 64, 81, 100]\n</code></pre>\n\n<h4>Comparison with Traditional Loops:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Task</th>\n        <th>Traditional</th>\n        <th>Comprehension</th>\n    </tr>\n    <tr>\n        <td><strong>Create list</strong></td>\n        <td>for x in range(10):<br>&nbsp;&nbsp;list.append(x**2)</td>\n        <td>[x**2 for x in range(10)]</td>\n    </tr>\n    <tr>\n        <td><strong>Filter list</strong></td>\n        <td>for x in nums:<br>&nbsp;&nbsp;if x > 5:<br>&nbsp;&nbsp;&nbsp;&nbsp;result.append(x)</td>\n        <td>[x for x in nums if x > 5]</td>\n    </tr>\n    <tr>\n        <td><strong>Dictionary</strong></td>\n        <td>for k, v in items:<br>&nbsp;&nbsp;dict[k] = v</td>\n        <td>{k: v for k, v in items}</td>\n    </tr>\n</table>\n\n<h4>Best Practices:</h4>\n<pre><code># ✅ Good: Simple, readable comprehensions\nsquares = [x**2 for x in range(10)]\neven = [x for x in numbers if x % 2 == 0]\n\n# ❌ Bad: Too complex, hard to read\nresult = [x**2 if x > 5 else x**3 if x > 3 else x for x in range(20) if x % 2 == 0 or x % 3 == 0]\n\n# ✅ Better: Break into multiple steps\nfiltered = [x for x in range(20) if x % 2 == 0 or x % 3 == 0]\nresult = [x**2 if x > 5 else x**3 if x > 3 else x for x in filtered]\n\n# Or use traditional loop for clarity\nresult = []\nfor x in range(20):\n    if x % 2 == 0 or x % 3 == 0:\n        if x > 5:\n            result.append(x**2)\n        elif x > 3:\n            result.append(x**3)\n        else:\n            result.append(x)\n</code></pre>\n        ",
  "starter_code": "# TODO: Create the following using comprehensions:\n# \n# 1. Generate a list of squares of even numbers from 1 to 20\n# 2. Create a dictionary mapping numbers 1-10 to their cubes\n# 3. Flatten this nested list: [[1, 2], [3, 4, 5], [6, 7]]\n# 4. From a list of words, create a dict with word lengths\n#    words = ['python', 'is', 'awesome', 'and', 'fun']\n# \n# Expected outputs:\n# 1. [4, 16, 36, 64, 100, 144, 196, 256, 324, 400]\n# 2. {1: 1, 2: 8, 3: 27, 4: 64, ..., 10: 1000}\n# 3. [1, 2, 3, 4, 5, 6, 7]\n# 4. {'python': 6, 'is': 2, 'awesome': 7, 'and': 3, 'fun': 3}\n\n",
  "solution_code": "# 1. Squares of even numbers 1-20\nsquares = [x**2 for x in range(1, 21) if x % 2 == 0]\nprint(squares)  # [4, 16, 36, 64, 100, 144, 196, 256, 324, 400]\n\n# 2. Dictionary of cubes 1-10\ncubes = {x: x**3 for x in range(1, 11)}\nprint(cubes)  # {1: 1, 2: 8, 3: 27, ..., 10: 1000}\n\n# 3. Flatten nested list\nnested = [[1, 2], [3, 4, 5], [6, 7]]\nflattened = [num for sublist in nested for num in sublist]\nprint(flattened)  # [1, 2, 3, 4, 5, 6, 7]\n\n# 4. Word lengths dictionary\nwords = ['python', 'is', 'awesome', 'and', 'fun']\nlengths = {word: len(word) for word in words}\nprint(lengths)  # {'python': 6, 'is': 2, 'awesome': 7, 'and': 3, 'fun': 3}",
  "learning_objectives": [
    "Master list comprehensions for concise code",
    "Use dictionary and set comprehensions",
    "Understand when to use comprehensions vs loops",
    "Apply advanced Python patterns like unpacking"
  ],
  "key_concepts": [
    "List Comprehension",
    "Dictionary Comprehension",
    "Set Comprehension",
    "Generator Expression",
    "Nested Comprehensions",
    "Conditional Expressions (Ternary)",
    "Unpacking (*args)",
    "Walrus Operator :="
  ],
  "test_cases": [
    {
      "name": "Test: Comprehensions",
      "input": "",
      "expected_output": "[4, 16, 36, 64, 100, 144, 196, 256, 324, 400]\n{1: 1, 2: 8, 3: 27, ..., 10: 1000}\n[1, 2, 3, 4, 5, 6, 7]\n{'python': 6, 'is': 2, 'awesome': 7, 'and': 3, 'fun': 3}"
    }
  ],
  "hints": [
    "List comprehension: [x**2 for x in range(1, 21) if x % 2 == 0]",
    "Dict comprehension: {x: x**3 for x in range(1, 11)}",
    "Flatten: [num for sublist in nested for num in sublist]",
    "Word lengths: {word: len(word) for word in words}",
    "Filter with if: [x for x in items if condition]"
  ],
  "visual_content": {
    "diagram": {
      "type": "comprehensions",
      "title": "Python Comprehensions",
      "list_comprehension": {
        "basic": "[expression for item in iterable]",
        "with_filter": "[expression for item in iterable if condition]",
        "with_transform": "[x**2 for x in range(10) if x % 2 == 0]",
        "result": "[0, 4, 16, 36, 64]"
      },
      "dict_comprehension": {
        "syntax": "{key: value for item in iterable}",
        "example": "{x: x**2 for x in range(1, 6)}",
        "result": "{1: 1, 2: 4, 3: 9, 4: 16, 5: 25}"
      },
      "set_comprehension": {
        "syntax": "{expression for item in iterable}",
        "example": "{x**2 for x in [1, 2, 2, 3, 3]}",
        "result": "{1, 4, 9} (unique values)"
      },
      "when_to_use": [
        "Simple transformations → Comprehension",
        "Simple filtering → Comprehension",
        "Complex logic → Traditional loop",
        "Nested conditions → Traditional loop"
      ]
    }
  }
}