{
  "module_id": 7,
  "title": "Working with Files",
  "order": 4,
  "reading_content": "\n<h3>File Operations in Python</h3>\n<p>Python provides powerful tools for reading from and writing to files, handling different formats, and working with file paths.</p>\n\n<h4>Opening and Closing Files:</h4>\n<pre><code># Basic file opening (must close manually)\nfile = open('data.txt', 'r')  # 'r' = read mode\ncontent = file.read()\nprint(content)\nfile.close()  # ‚ùå Must remember to close!\n\n# Better: Using 'with' statement (auto-closes)\nwith open('data.txt', 'r') as file:\n    content = file.read()\n    print(content)\n# File automatically closed when exiting 'with' block\n</code></pre>\n\n<h4>File Opening Modes:</h4>\n<pre><code># Text modes:\n# 'r'  - Read (default) - File must exist\n# 'w'  - Write - Creates new file or overwrites existing\n# 'a'  - Append - Add to end of file\n# 'r+' - Read and write\n# 'w+' - Write and read (overwrites)\n# 'a+' - Append and read\n\n# Binary modes (add 'b'):\n# 'rb' - Read binary\n# 'wb' - Write binary\n# 'ab' - Append binary\n\n# Read mode\nwith open('data.txt', 'r') as file:\n    content = file.read()\n\n# Write mode (overwrites!)\nwith open('output.txt', 'w') as file:\n    file.write('Hello, World!')\n\n# Append mode (adds to end)\nwith open('output.txt', 'a') as file:\n    file.write('\\nNew line!')\n</code></pre>\n\n<h4>Reading Files - Different Methods:</h4>\n<pre><code># read() - Read entire file as string\nwith open('data.txt', 'r') as file:\n    content = file.read()\n    print(content)  # Entire file\n\n# read(size) - Read specific number of characters\nwith open('data.txt', 'r') as file:\n    chunk = file.read(10)  # Read first 10 characters\n    print(chunk)\n\n# readline() - Read one line\nwith open('data.txt', 'r') as file:\n    line1 = file.readline()  # First line\n    line2 = file.readline()  # Second line\n    print(line1)\n    print(line2)\n\n# readlines() - Read all lines into list\nwith open('data.txt', 'r') as file:\n    lines = file.readlines()  # List of lines\n    for line in lines:\n        print(line.strip())  # strip() removes \\n\n# Best: Iterate directly (memory-efficient)\nwith open('data.txt', 'r') as file:\n    for line in file:  # One line at a time\n        print(line.strip())\n</code></pre>\n\n<h4>Writing to Files:</h4>\n<pre><code># write() - Write string to file\nwith open('output.txt', 'w') as file:\n    file.write('First line\\n')\n    file.write('Second line\\n')\n    file.write('Third line\\n')\n\n# writelines() - Write list of strings\nlines = ['Line 1\\n', 'Line 2\\n', 'Line 3\\n']\nwith open('output.txt', 'w') as file:\n    file.writelines(lines)\n\n# Using print() to write to file\nwith open('output.txt', 'w') as file:\n    print('First line', file=file)\n    print('Second line', file=file)\n</code></pre>\n\n<h4>Working with File Paths:</h4>\n<pre><code>import os\n\n# Current working directory\nprint(os.getcwd())  # /home/user/project\n\n# Check if file exists\nif os.path.exists('data.txt'):\n    print('File exists')\n\n# Check if path is file or directory\nprint(os.path.isfile('data.txt'))  # True\nprint(os.path.isdir('folder'))     # True\n\n# Get file size\nsize = os.path.getsize('data.txt')\nprint(f'Size: {size} bytes')\n\n# Get absolute path\nabsolute = os.path.abspath('data.txt')\nprint(absolute)  # /home/user/project/data.txt\n\n# Join paths (cross-platform)\npath = os.path.join('folder', 'subfolder', 'file.txt')\nprint(path)  # folder/subfolder/file.txt (or folder\\\\subfolder\\\\file.txt on Windows)\n\n# Split path into directory and filename\ndirectory, filename = os.path.split('/home/user/data.txt')\nprint(directory)  # /home/user\nprint(filename)   # data.txt\n\n# Get file extension\nname, ext = os.path.splitext('document.pdf')\nprint(name)  # document\nprint(ext)   # .pdf\n</code></pre>\n\n<h4>Using pathlib (Modern Approach):</h4>\n<pre><code>from pathlib import Path\n\n# Create Path object\nfile_path = Path('data.txt')\n\n# Check if exists\nif file_path.exists():\n    print('File exists')\n\n# Read file\ncontent = file_path.read_text()\nprint(content)\n\n# Write file\nfile_path.write_text('Hello, World!')\n\n# File properties\nprint(file_path.name)       # data.txt\nprint(file_path.suffix)     # .txt\nprint(file_path.stem)       # data\nprint(file_path.parent)     # . (parent directory)\nprint(file_path.absolute()) # /full/path/to/data.txt\n\n# Join paths\nproject_dir = Path('project')\ndata_file = project_dir / 'data' / 'users.txt'\nprint(data_file)  # project/data/users.txt\n\n# Create directory\nPath('new_folder').mkdir(exist_ok=True)  # exist_ok=True won't error if exists\n\n# List files in directory\nfor file in Path('.').iterdir():\n    if file.is_file():\n        print(file.name)\n\n# Find all .txt files\nfor txt_file in Path('.').glob('*.txt'):\n    print(txt_file)\n\n# Find all .py files recursively\nfor py_file in Path('.').rglob('*.py'):\n    print(py_file)\n</code></pre>\n\n<h4>Practical Example - Log File Analyzer:</h4>\n<pre><code>def analyze_log_file(filename):\n    \"\"\"Analyze log file for errors.\"\"\"\n    error_count = 0\n    warning_count = 0\n    errors = []\n    \n    with open(filename, 'r') as file:\n        for line_num, line in enumerate(file, start=1):\n            if 'ERROR' in line:\n                error_count += 1\n                errors.append((line_num, line.strip()))\n            elif 'WARNING' in line:\n                warning_count += 1\n    \n    print(f\"Total errors: {error_count}\")\n    print(f\"Total warnings: {warning_count}\")\n    \n    if errors:\n        print(\"\\nError details:\")\n        for line_num, error in errors[:5]:  # Show first 5\n            print(f\"  Line {line_num}: {error}\")\n\n# analyze_log_file('app.log')\n</code></pre>\n\n<h4>Working with CSV Files:</h4>\n<pre><code>import csv\n\n# Reading CSV\nwith open('data.csv', 'r') as file:\n    csv_reader = csv.reader(file)\n    header = next(csv_reader)  # Read header\n    print(f\"Header: {header}\")\n    \n    for row in csv_reader:\n        print(row)  # Each row is a list\n\n# Reading CSV as dictionary\nwith open('data.csv', 'r') as file:\n    csv_reader = csv.DictReader(file)\n    for row in csv_reader:\n        print(row)  # Each row is a dict: {'name': 'Alice', 'age': '25', ...}\n        print(f\"{row['name']} is {row['age']} years old\")\n\n# Writing CSV\ndata = [\n    ['Name', 'Age', 'City'],\n    ['Alice', 25, 'NYC'],\n    ['Bob', 30, 'LA'],\n    ['Charlie', 35, 'Chicago']\n]\n\nwith open('output.csv', 'w', newline='') as file:\n    csv_writer = csv.writer(file)\n    csv_writer.writerows(data)\n\n# Writing CSV from dictionaries\ndata = [\n    {'name': 'Alice', 'age': 25, 'city': 'NYC'},\n    {'name': 'Bob', 'age': 30, 'city': 'LA'}\n]\n\nwith open('output.csv', 'w', newline='') as file:\n    fieldnames = ['name', 'age', 'city']\n    csv_writer = csv.DictWriter(file, fieldnames=fieldnames)\n    \n    csv_writer.writeheader()\n    csv_writer.writerows(data)\n</code></pre>\n\n<h4>Working with JSON Files:</h4>\n<pre><code>import json\n\n# Reading JSON\nwith open('data.json', 'r') as file:\n    data = json.load(file)  # Parse JSON to Python dict/list\n    print(data)\n\n# Writing JSON\ndata = {\n    'name': 'Alice',\n    'age': 25,\n    'hobbies': ['reading', 'coding', 'gaming']\n}\n\nwith open('output.json', 'w') as file:\n    json.dump(data, file, indent=4)  # indent=4 for pretty formatting\n\n# Convert to/from JSON strings\njson_string = json.dumps(data, indent=2)\nprint(json_string)\n\ndata = json.loads(json_string)\nprint(data)\n</code></pre>\n\n<h4>Practical Example - Configuration Manager:</h4>\n<pre><code>import json\nfrom pathlib import Path\n\nclass ConfigManager:\n    \"\"\"Manage application configuration.\"\"\"\n    \n    def __init__(self, config_file='config.json'):\n        self.config_file = Path(config_file)\n        self.config = self.load()\n    \n    def load(self):\n        \"\"\"Load configuration from file.\"\"\"\n        if self.config_file.exists():\n            with open(self.config_file, 'r') as file:\n                return json.load(file)\n        return {}  # Default empty config\n    \n    def save(self):\n        \"\"\"Save configuration to file.\"\"\"\n        with open(self.config_file, 'w') as file:\n            json.dump(self.config, file, indent=4)\n    \n    def get(self, key, default=None):\n        \"\"\"Get configuration value.\"\"\"\n        return self.config.get(key, default)\n    \n    def set(self, key, value):\n        \"\"\"Set configuration value.\"\"\"\n        self.config[key] = value\n        self.save()\n\n# Usage\nconfig = ConfigManager()\nconfig.set('theme', 'dark')\nconfig.set('language', 'en')\nprint(config.get('theme'))  # dark\n</code></pre>\n\n<h4>Exception Handling with Files:</h4>\n<pre><code>def safe_read_file(filename):\n    \"\"\"Read file with proper exception handling.\"\"\"\n    try:\n        with open(filename, 'r') as file:\n            return file.read()\n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found\")\n        return None\n    except PermissionError:\n        print(f\"Error: No permission to read '{filename}'\")\n        return None\n    except Exception as e:\n        print(f\"Unexpected error: {e}\")\n        return None\n\ndef safe_write_file(filename, content):\n    \"\"\"Write to file with proper exception handling.\"\"\"\n    try:\n        with open(filename, 'w') as file:\n            file.write(content)\n            return True\n    except PermissionError:\n        print(f\"Error: No permission to write to '{filename}'\")\n        return False\n    except Exception as e:\n        print(f\"Error: {e}\")\n        return False\n\n# Usage\ncontent = safe_read_file('data.txt')\nif content:\n    print(content)\n\nif safe_write_file('output.txt', 'Hello, World!'):\n    print('File written successfully')\n</code></pre>\n\n<h4>Best Practices:</h4>\n<table border='1' style='border-collapse: collapse; padding: 8px;'>\n    <tr>\n        <th>Practice</th>\n        <th>Why</th>\n    </tr>\n    <tr>\n        <td><strong>Use 'with' statement</strong></td>\n        <td>Automatically closes file, even if error occurs</td>\n    </tr>\n    <tr>\n        <td><strong>Use pathlib for paths</strong></td>\n        <td>Modern, cross-platform, object-oriented</td>\n    </tr>\n    <tr>\n        <td><strong>Handle exceptions</strong></td>\n        <td>FileNotFoundError, PermissionError, etc.</td>\n    </tr>\n    <tr>\n        <td><strong>Read large files line-by-line</strong></td>\n        <td>Memory-efficient for huge files</td>\n    </tr>\n    <tr>\n        <td><strong>Use appropriate mode</strong></td>\n        <td>'r' for reading, 'w' for writing, 'a' for appending</td>\n    </tr>\n</table>\n        ",
  "starter_code": "# TODO: Create a function that counts word occurrences in a file:\n# Function: count_words(filename)\n# - Reads the file\n# - Counts how many times each word appears (case-insensitive)\n# - Returns a dictionary of word counts\n# - Handles FileNotFoundError\n# \n# Example file content: \"Hello world. Hello Python. Python is great.\"\n# Expected output: {'hello': 2, 'world': 1, 'python': 2, 'is': 1, 'great': 1}\n# \n# Hint: Use .lower(), .split(), and remove punctuation\n\n",
  "solution_code": "def count_words(filename):\n    try:\n        word_counts = {}\n        \n        with open(filename, 'r') as file:\n            for line in file:\n                # Remove punctuation and split into words\n                words = line.lower().replace('.', '').replace(',', '').replace('!', '').replace('?', '').split()\n                \n                for word in words:\n                    word_counts[word] = word_counts.get(word, 0) + 1\n        \n        return word_counts\n    \n    except FileNotFoundError:\n        print(f\"Error: File '{filename}' not found\")\n        return {}\n\n# Test (assuming test.txt exists with content)\n# result = count_words('test.txt')\n# print(result)",
  "learning_objectives": [
    "Read from and write to text files",
    "Use 'with' statement for automatic file closing",
    "Work with file paths using os and pathlib",
    "Handle CSV and JSON files"
  ],
  "key_concepts": [
    "open()",
    "with Statement",
    "File Modes (r, w, a, rb, wb)",
    "read(), readline(), readlines()",
    "write(), writelines()",
    "pathlib.Path",
    "CSV and JSON handling"
  ],
  "test_cases": [
    {
      "name": "Test: Word counting from file",
      "input": "",
      "expected_output": "Dictionary with word counts"
    }
  ],
  "hints": [
    "Open file: with open(filename, 'r') as file: ...",
    "Read lines: for line in file: ...",
    "Convert to lowercase: line.lower()",
    "Remove punctuation: line.replace('.', '').replace(',', '')",
    "Split into words: line.split()",
    "Count words: word_counts[word] = word_counts.get(word, 0) + 1",
    "Handle error: except FileNotFoundError: ..."
  ],
  "visual_content": {
    "diagram": {
      "type": "file_operations",
      "title": "File Operations in Python",
      "modes": {
        "r": "Read (file must exist)",
        "w": "Write (creates/overwrites)",
        "a": "Append (adds to end)",
        "rb": "Read binary",
        "wb": "Write binary"
      },
      "with_statement": "with open('file.txt', 'r') as file:\\n    content = file.read()\\n# File automatically closed",
      "reading_methods": {
        "read()": "Read entire file as string",
        "readline()": "Read one line",
        "readlines()": "Read all lines into list",
        "iteration": "for line in file: ... (memory-efficient)"
      },
      "pathlib_example": "from pathlib import Path\\nfile = Path('data.txt')\\nif file.exists():\\n    content = file.read_text()"
    }
  }
}